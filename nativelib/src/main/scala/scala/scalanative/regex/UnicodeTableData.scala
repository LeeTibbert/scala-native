package scala.scalanative
package regex

import scala.collection.immutable.HashSet
import scala.collection.mutable.ArrayBuilder

trait UnicodeTableData {

  type UnicodeTableElement_t = Int
  type UnicodeTable_t        = Array[UnicodeTableElement_t]

  class UnicodeTableBuilder {

    // One input code point yields between 0 or 3, inclusive, array elements.
    // 0 if it gets buffered, 3 if it ends a range.
    private final val MAX_EMITTED_PER_INPUT = 3

    private val builder = ArrayBuilder.make[UnicodeTableElement_t]

    private var start: Option[Int] = None
    private var end: Option[Int]   = None
    private var delta: Option[Int] = None

    def +=(element: UnicodeTableElement_t): this.type = {

      if (start.isEmpty) {
        start = Some(element)
      } else if (end.isEmpty) {
        end = Some(element)
        delta = Some(end.get - start.get)
      } else {
        val difference = element - end.get
        if (difference == delta.get) {
          end = Some(element)
        } else {
          builder ++= List(start.get, end.get, delta.get)
          start = Some(element)
          end = None
          delta = None
        }
      }

      this
    }

    def addOne(element: UnicodeTableElement_t): this.type = this.+=(element)

    def result(): UnicodeTable_t = {
      // Ensure last run gets put into the builder before returning result.
      if (!start.isEmpty) {
        if (end.isEmpty) {
          end = start
          delta = Some(1)
        }
        builder ++= List(start.get, end.get, delta.get)
      }

      builder.result
    }

    // Guess generously to reduce copying of large structures during resize.
    def sizeHint(size: Int): Unit =
      builder.sizeHint(size * MAX_EMITTED_PER_INPUT)

  }

// Format: off

  private final val unicodeCategoryRanges = Array( // ranges are inclusive
  //		low,	 high
      Tuple2(0x0378, 0x10FFFF), // "UNASSIGNED"		       // Cn, index 0
      Tuple2(0x0041,  0x1D7CA), // "UPPERCASE_LETTER"	       // Lu
      Tuple2(0x0061,  0x1D7CB), // "LOWERCASE_LETTER"	       // Ll
      Tuple2(0x01C5,   0x1FFC), // "TITLECASE_LETTER"	       // Lt
      Tuple2(0x02B0,  0x16F9F), // "MODIFIER_LETTER"	       // Lm
      Tuple2(0x00AA,  0x2FA1D), // "OTHER_LETTER"	       // Lo
      Tuple2(0x0300,  0xE01EF), // "NON_SPACING_MARK"	       // Mn
      Tuple2(0x0488,   0xa672), // "ENCLOSING_MARK"	       // Me
      Tuple2(0x0903,  0x1D172), // "COMBINING_SPACING_MARK"    // Mc
      Tuple2(0x0030,  0x1D7FF), // "DECIMAL_DIGIT_NUMBER"      // Nd
      Tuple2(0X16EE,  0x12462), // "LETTER_NUMBER"	       // Nl, index 10
      Tuple2(0x00B2,  0x1F10A), // "OTHER_NUMBER"	       // No
      Tuple2(0x0020,   0x3000), // "SPACE_SEPARATOR"	       // Zs
      Tuple2(0x2028,   0x2028), // "LINE_SEPARATOR"	       // Zl
      Tuple2(0x2029,   0x2029), // "PARAGRAPH_SEPARATOR"       // Zp
      Tuple2(0x000,    0x0095), // "CONTROL"		       // Cc
      Tuple2(0x00AD,  0xE007F), // "FORMAT"		       // Cf
      Tuple2(0,	0),		// "HACK, NOT USED IN JVM" // BEWARE! UNUSED
      Tuple2(0xE000, 0x10FFFD), // "PRIVATE_USE"	       // Co
      Tuple2(0xD800,   0xDFFF), // "SURROGATE"		       // Cs
      Tuple2(0x002D,   0xFF0D), // "DASH_PUNCTUATION"	       // Pd, index 20
      Tuple2(0x0028,   0xFF62), // "START_PUNCTUATION"	       // Ps
      Tuple2(0x0029,   0x2083), // "END_PUNCTUATION"	       // Pe
      Tuple2(0x005F,   0xFF3F), // "CONNECTOR_PUNCTUATION"     // Pc
      Tuple2(0x0021,  0x12473), // "OTHER_PUNCTUATION"	       // Po
      Tuple2(0x002B,  0x1EEF1), // "MATH_SYMBOL"	       // Sm
      Tuple2(0x0024,   0xFFE6), // "CURRENCY_SYMBOL"	       // Sc
      Tuple2(0x005E,   0xFFe3), // "MODIFIER_SYMBOL"	       // Sk
      Tuple2(0x00A6,  0x1F773), // "OTHER_SYMBOL"	       // So
      Tuple2(0x00AB,   0x2E20), // "INITIAL_QUOTE_PUNCTUATION" // Pi
      Tuple2(0x00BB,	0x2E21) // "FINAL_QUOTE_PUNCTUATION"   // Pf, index 30
    )

// Format: on

  private[regex] def generateUnicodeTable(
      categories: Seq[Byte]
  ): UnicodeTable_t = {

    assert(categories.length > 0, s"no categories supplied")

    for (category <- categories) {
      assert(
        (category >= 0) && (category < unicodeCategoryRanges.size) &&
          (category != 17)
      )
    }

    val yesTypes = HashSet(categories.map(c => c.toInt): _*)

    var lowBound  = Unicode.MAX_RUNE
    var highBound = 0

    for (category <- categories) {
      val (lb, hb) = unicodeCategoryRanges(category)
      if (lb < lowBound) lowBound = lb
      if (hb > highBound) highBound = hb
    }

    val builder = new UnicodeTableBuilder

    assert(builder != null, s"builder is null")

    // Make a best guess for a good starting size.
    // Use highBound - lowBound if it is small else limit size.
    // Large ranges are likely to be sparse, so no sense allocating
    // huge amounts of memory.
    //
    // Small tables should complete with out extra copies caused by
    // resizing. Huge tables will cause resizing, but then again,
    // it is expensive to be large anyway.

    // Try to pick a sweet spot. Only 4 ranges larger than this.
    val limit      = 1024 * 2
    val boundRange = highBound - lowBound
    val hint       = if (boundRange < limit) (boundRange + 1) else limit
    builder.sizeHint(hint)

    for (i <- lowBound to highBound
         if (yesTypes.contains(Character.getType(i)))) {
      builder += i
    }

    val result = builder.result

    result
  }

  private[regex] def generateUnicodeTable(category: Byte): UnicodeTable_t = {
    generateUnicodeTable(Seq(category))
  }

// format: off

  // Define the sub-catergory tables, e.g. Ll (letter, lowercase), before
  // they are used to generate full caterory tables, e.g. L (letter) table
  // below. Avoid null pointer exceptions.

  // Sub-categories are in alphabetical order, followed by the full
  // table which they comprise.


  // Tables for General Caterory C - Other (control, surrogate, etc.)

  final val Cc = Array(
      0x0000, 0x001f, 1,
      0x007f, 0x009f, 1
    )

  final val Cf = Array(
      // Ported directly from Unicode 6.3, then JVM 8 warts added.
      0x00ad, 0x00ad, 1,
      0x0600, 0x0604, 1,
//    0x061c, 0x061c, 1, // Cf in Unicode 6.3, Cn in Java 9
      0x06dd, 0x06dd, 1,
      0x070f, 0x070f, 1,
//    0x180e, 0x180e, 1, // Cf in Unicode 6.3, Zs in Java 8
      0x200b, 0x200f, 1,
      0x202a, 0x202e, 1,
      0x2060, 0x2064, 1,
//    0x2066, 0x2069, 1, // Cf in Unicode 6.3, Cn in Java 8
      0x206a, 0x206f, 1,
      0xfeff, 0xfeff, 1,
      0xfff9, 0xfffb, 1,
      0x110bd, 0x110bd, 1,
      0x1d173, 0x1d17a, 1,
      0xe0001, 0xe0001, 1,
      0xe0020, 0xe007f, 1
    )

  final val Cn = Array(
      // Ported directly from Unicode 6.3, then JVM 8 warts added.
      0x0378, 0x0379, 1,
      0x037f, 0x0383, 1,
      0x038b, 0x038b, 1,
      0x038d, 0x038d, 1,
      0x03a2, 0x03a2, 1,
      0x0528, 0x0530, 1,
      0x0557, 0x0558, 1,
      0x0560, 0x0560, 1,
      0x0588, 0x0588, 1,
      0x058b, 0x058e, 1,
      0x0590, 0x0590, 1,
      0x05c8, 0x05cf, 1,
      0x05eb, 0x05ef, 1,
      0x05f5, 0x05ff, 1,
      0x0605, 0x0605, 1,
//    0x061d, 0x061d, 1, // Unicode 6.3 has only 0x61d here.
      0x061c, 0x061d, 1, // 0x61c is Cf in Unicode 6.3, Cn in Java 8
      0x070e, 0x070e, 1,
      0x074b, 0x074c, 1,
      0x07b2, 0x07bf, 1,
      0x07fb, 0x07ff, 1,
      0x082e, 0x082f, 1,
      0x083f, 0x083f, 1,
      0x085c, 0x085d, 1,
      0x085f, 0x089f, 1,
      0x08a1, 0x08a1, 1,
      0x08ad, 0x08e3, 1,
      0x08ff, 0x08ff, 1,
      0x0978, 0x0978, 1,
      0x0980, 0x0980, 1,
      0x0984, 0x0984, 1,
      0x098d, 0x098e, 1,
      0x0991, 0x0992, 1,
      0x09a9, 0x09a9, 1,
      0x09b1, 0x09b1, 1,
      0x09b3, 0x09b5, 1,
      0x09ba, 0x09bb, 1,
      0x09c5, 0x09c6, 1,
      0x09c9, 0x09ca, 1,
      0x09cf, 0x09d6, 1,
      0x09d8, 0x09db, 1,
      0x09de, 0x09de, 1,
      0x09e4, 0x09e5, 1,
      0x09fc, 0x0a00, 1,
      0x0a04, 0x0a04, 1,
      0x0a0b, 0x0a0e, 1,
      0x0a11, 0x0a12, 1,
      0x0a29, 0x0a29, 1,
      0x0a31, 0x0a31, 1,
      0x0a34, 0x0a34, 1,
      0x0a37, 0x0a37, 1,
      0x0a3a, 0x0a3b, 1,
      0x0a3d, 0x0a3d, 1,
      0x0a43, 0x0a46, 1,
      0x0a49, 0x0a4a, 1,
      0x0a4e, 0x0a50, 1,
      0x0a52, 0x0a58, 1,
      0x0a5d, 0x0a5d, 1,
      0x0a5f, 0x0a65, 1,
      0x0a76, 0x0a80, 1,
      0x0a84, 0x0a84, 1,
      0x0a8e, 0x0a8e, 1,
      0x0a92, 0x0a92, 1,
      0x0aa9, 0x0aa9, 1,
      0x0ab1, 0x0ab1, 1,
      0x0ab4, 0x0ab4, 1,
      0x0aba, 0x0abb, 1,
      0x0ac6, 0x0ac6, 1,
      0x0aca, 0x0aca, 1,
      0x0ace, 0x0acf, 1,
      0x0ad1, 0x0adf, 1,
      0x0ae4, 0x0ae5, 1,
      0x0af2, 0x0b00, 1,
      0x0b04, 0x0b04, 1,
      0x0b0d, 0x0b0e, 1,
      0x0b11, 0x0b12, 1,
      0x0b29, 0x0b29, 1,
      0x0b31, 0x0b31, 1,
      0x0b34, 0x0b34, 1,
      0x0b3a, 0x0b3b, 1,
      0x0b45, 0x0b46, 1,
      0x0b49, 0x0b4a, 1,
      0x0b4e, 0x0b55, 1,
      0x0b58, 0x0b5b, 1,
      0x0b5e, 0x0b5e, 1,
      0x0b64, 0x0b65, 1,
      0x0b78, 0x0b81, 1,
      0x0b84, 0x0b84, 1,
      0x0b8b, 0x0b8d, 1,
      0x0b91, 0x0b91, 1,
      0x0b96, 0x0b98, 1,
      0x0b9b, 0x0b9b, 1,
      0x0b9d, 0x0b9d, 1,
      0x0ba0, 0x0ba2, 1,
      0x0ba5, 0x0ba7, 1,
      0x0bab, 0x0bad, 1,
      0x0bba, 0x0bbd, 1,
      0x0bc3, 0x0bc5, 1,
      0x0bc9, 0x0bc9, 1,
      0x0bce, 0x0bcf, 1,
      0x0bd1, 0x0bd6, 1,
      0x0bd8, 0x0be5, 1,
      0x0bfb, 0x0c00, 1,
      0x0c04, 0x0c04, 1,
      0x0c0d, 0x0c0d, 1,
      0x0c11, 0x0c11, 1,
      0x0c29, 0x0c29, 1,
      0x0c34, 0x0c34, 1,
      0x0c3a, 0x0c3c, 1,
      0x0c45, 0x0c45, 1,
      0x0c49, 0x0c49, 1,
      0x0c4e, 0x0c54, 1,
      0x0c57, 0x0c57, 1,
      0x0c5a, 0x0c5f, 1,
      0x0c64, 0x0c65, 1,
      0x0c70, 0x0c77, 1,
      0x0c80, 0x0c81, 1,
      0x0c84, 0x0c84, 1,
      0x0c8d, 0x0c8d, 1,
      0x0c91, 0x0c91, 1,
      0x0ca9, 0x0ca9, 1,
      0x0cb4, 0x0cb4, 1,
      0x0cba, 0x0cbb, 1,
      0x0cc5, 0x0cc5, 1,
      0x0cc9, 0x0cc9, 1,
      0x0cce, 0x0cd4, 1,
      0x0cd7, 0x0cdd, 1,
      0x0cdf, 0x0cdf, 1,
      0x0ce4, 0x0ce5, 1,
      0x0cf0, 0x0cf0, 1,
      0x0cf3, 0x0d01, 1,
      0x0d04, 0x0d04, 1,
      0x0d0d, 0x0d0d, 1,
      0x0d11, 0x0d11, 1,
      0x0d3b, 0x0d3c, 1,
      0x0d45, 0x0d45, 1,
      0x0d49, 0x0d49, 1,
      0x0d4f, 0x0d56, 1,
      0x0d58, 0x0d5f, 1,
      0x0d64, 0x0d65, 1,
      0x0d76, 0x0d78, 1,
      0x0d80, 0x0d81, 1,
      0x0d84, 0x0d84, 1,
      0x0d97, 0x0d99, 1,
      0x0db2, 0x0db2, 1,
      0x0dbc, 0x0dbc, 1,
      0x0dbe, 0x0dbf, 1,
      0x0dc7, 0x0dc9, 1,
      0x0dcb, 0x0dce, 1,
      0x0dd5, 0x0dd5, 1,
      0x0dd7, 0x0dd7, 1,
      0x0de0, 0x0df1, 1,
      0x0df5, 0x0e00, 1,
      0x0e3b, 0x0e3e, 1,
      0x0e5c, 0x0e80, 1,
      0x0e83, 0x0e83, 1,
      0x0e85, 0x0e86, 1,
      0x0e89, 0x0e89, 1,
      0x0e8b, 0x0e8c, 1,
      0x0e8e, 0x0e93, 1,
      0x0e98, 0x0e98, 1,
      0x0ea0, 0x0ea0, 1,
      0x0ea4, 0x0ea4, 1,
      0x0ea6, 0x0ea6, 1,
      0x0ea8, 0x0ea9, 1,
      0x0eac, 0x0eac, 1,
      0x0eba, 0x0eba, 1,
      0x0ebe, 0x0ebf, 1,
      0x0ec5, 0x0ec5, 1,
      0x0ec7, 0x0ec7, 1,
      0x0ece, 0x0ecf, 1,
      0x0eda, 0x0edb, 1,
      0x0ee0, 0x0eff, 1,
      0x0f48, 0x0f48, 1,
      0x0f6d, 0x0f70, 1,
      0x0f98, 0x0f98, 1,
      0x0fbd, 0x0fbd, 1,
      0x0fcd, 0x0fcd, 1,
      0x0fdb, 0x0fff, 1,
      0x10c6, 0x10c6, 1,
      0x10c8, 0x10cc, 1,
      0x10ce, 0x10cf, 1,
      0x1249, 0x1249, 1,
      0x124e, 0x124f, 1,
      0x1257, 0x1257, 1,
      0x1259, 0x1259, 1,
      0x125e, 0x125f, 1,
      0x1289, 0x1289, 1,
      0x128e, 0x128f, 1,
      0x12b1, 0x12b1, 1,
      0x12b6, 0x12b7, 1,
      0x12bf, 0x12bf, 1,
      0x12c1, 0x12c1, 1,
      0x12c6, 0x12c7, 1,
      0x12d7, 0x12d7, 1,
      0x1311, 0x1311, 1,
      0x1316, 0x1317, 1,
      0x135b, 0x135c, 1,
      0x137d, 0x137f, 1,
      0x139a, 0x139f, 1,
      0x13f5, 0x13ff, 1,
      0x169d, 0x169f, 1,
      0x16f1, 0x16ff, 1,
      0x170d, 0x170d, 1,
      0x1715, 0x171f, 1,
      0x1737, 0x173f, 1,
      0x1754, 0x175f, 1,
      0x176d, 0x176d, 1,
      0x1771, 0x1771, 1,
      0x1774, 0x177f, 1,
      0x17de, 0x17df, 1,
      0x17ea, 0x17ef, 1,
      0x17fa, 0x17ff, 1,
      0x180f, 0x180f, 1,
      0x181a, 0x181f, 1,
      0x1878, 0x187f, 1,
      0x18ab, 0x18af, 1,
      0x18f6, 0x18ff, 1,
      0x191d, 0x191f, 1,
      0x192c, 0x192f, 1,
      0x193c, 0x193f, 1,
      0x1941, 0x1943, 1,
      0x196e, 0x196f, 1,
      0x1975, 0x197f, 1,
      0x19ac, 0x19af, 1,
      0x19ca, 0x19cf, 1,
      0x19db, 0x19dd, 1,
      0x1a1c, 0x1a1d, 1,
      0x1a5f, 0x1a5f, 1,
      0x1a7d, 0x1a7e, 1,
      0x1a8a, 0x1a8f, 1,
      0x1a9a, 0x1a9f, 1,
      0x1aae, 0x1aff, 1,
      0x1b4c, 0x1b4f, 1,
      0x1b7d, 0x1b7f, 1,
      0x1bf4, 0x1bfb, 1,
      0x1c38, 0x1c3a, 1,
      0x1c4a, 0x1c4c, 1,
      0x1c80, 0x1cbf, 1,
      0x1cc8, 0x1ccf, 1,
      0x1cf7, 0x1cff, 1,
      0x1de7, 0x1dfb, 1,
      0x1f16, 0x1f17, 1,
      0x1f1e, 0x1f1f, 1,
      0x1f46, 0x1f47, 1,
      0x1f4e, 0x1f4f, 1,
      0x1f58, 0x1f58, 1,
      0x1f5a, 0x1f5a, 1,
      0x1f5c, 0x1f5c, 1,
      0x1f5e, 0x1f5e, 1,
      0x1f7e, 0x1f7f, 1,
      0x1fb5, 0x1fb5, 1,
      0x1fc5, 0x1fc5, 1,
      0x1fd4, 0x1fd5, 1,
      0x1fdc, 0x1fdc, 1,
      0x1ff0, 0x1ff1, 1,
      0x1ff5, 0x1ff5, 1,
      0x1fff, 0x1fff, 1,
//    0x2065, 0x2065, 1,
      0x2065, 0x2069, 1, // 2066..2069 are Cf in Unicode 6.3, Cn in Java 8
      0x2072, 0x2073, 1,
      0x208f, 0x208f, 1,
      0x209d, 0x209f, 1,
      0x20bb, 0x20cf, 1,
      0x20f1, 0x20ff, 1,
      0x218a, 0x218f, 1,
      0x23f4, 0x23ff, 1,
      0x2427, 0x243f, 1,
      0x244b, 0x245f, 1,
      0x2700, 0x2700, 1,
      0x2b4d, 0x2b4f, 1,
      0x2b5a, 0x2bff, 1,
      0x2c2f, 0x2c2f, 1,
      0x2c5f, 0x2c5f, 1,
      0x2cf4, 0x2cf8, 1,
      0x2d26, 0x2d26, 1,
      0x2d28, 0x2d2c, 1,
      0x2d2e, 0x2d2f, 1,
      0x2d68, 0x2d6e, 1,
      0x2d71, 0x2d7e, 1,
      0x2d97, 0x2d9f, 1,
      0x2da7, 0x2da7, 1,
      0x2daf, 0x2daf, 1,
      0x2db7, 0x2db7, 1,
      0x2dbf, 0x2dbf, 1,
      0x2dc7, 0x2dc7, 1,
      0x2dcf, 0x2dcf, 1,
      0x2dd7, 0x2dd7, 1,
      0x2ddf, 0x2ddf, 1,
      0x2e3c, 0x2e7f, 1,
      0x2e9a, 0x2e9a, 1,
      0x2ef4, 0x2eff, 1,
      0x2fd6, 0x2fef, 1,
      0x2ffc, 0x2fff, 1,
      0x3040, 0x3040, 1,
      0x3097, 0x3098, 1,
      0x3100, 0x3104, 1,
      0x312e, 0x3130, 1,
      0x318f, 0x318f, 1,
      0x31bb, 0x31bf, 1,
      0x31e4, 0x31ef, 1,
      0x321f, 0x321f, 1,
      0x32ff, 0x32ff, 1,
      0x4db6, 0x4dbf, 1,
      0x9fcd, 0x9fff, 1,
      0xa48d, 0xa48f, 1,
      0xa4c7, 0xa4cf, 1,
      0xa62c, 0xa63f, 1,
      0xa698, 0xa69e, 1,
      0xa6f8, 0xa6ff, 1,
      0xa78f, 0xa78f, 1,
      0xa794, 0xa79f, 1,
      0xa7ab, 0xa7f7, 1,
      0xa82c, 0xa82f, 1,
      0xa83a, 0xa83f, 1,
      0xa878, 0xa87f, 1,
      0xa8c5, 0xa8cd, 1,
      0xa8da, 0xa8df, 1,
      0xa8fc, 0xa8ff, 1,
      0xa954, 0xa95e, 1,
      0xa97d, 0xa97f, 1,
      0xa9ce, 0xa9ce, 1,
      0xa9da, 0xa9dd, 1,
      0xa9e0, 0xa9ff, 1,
      0xaa37, 0xaa3f, 1,
      0xaa4e, 0xaa4f, 1,
      0xaa5a, 0xaa5b, 1,
      0xaa7c, 0xaa7f, 1,
      0xaac3, 0xaada, 1,
      0xaaf7, 0xab00, 1,
      0xab07, 0xab08, 1,
      0xab0f, 0xab10, 1,
      0xab17, 0xab1f, 1,
      0xab27, 0xab27, 1,
      0xab2f, 0xabbf, 1,
      0xabee, 0xabef, 1,
      0xabfa, 0xabff, 1,
      0xd7a4, 0xd7af, 1,
      0xd7c7, 0xd7ca, 1,
      0xd7fc, 0xd7ff, 1,
      0xfa6e, 0xfa6f, 1,
      0xfada, 0xfaff, 1,
      0xfb07, 0xfb12, 1,
      0xfb18, 0xfb1c, 1,
      0xfb37, 0xfb37, 1,
      0xfb3d, 0xfb3d, 1,
      0xfb3f, 0xfb3f, 1,
      0xfb42, 0xfb42, 1,
      0xfb45, 0xfb45, 1,
      0xfbc2, 0xfbd2, 1,
      0xfd40, 0xfd4f, 1,
      0xfd90, 0xfd91, 1,
      0xfdc8, 0xfdef, 1,
      0xfdfe, 0xfdff, 1,
      0xfe1a, 0xfe1f, 1,
      0xfe27, 0xfe2f, 1,
      0xfe53, 0xfe53, 1,
      0xfe67, 0xfe67, 1,
      0xfe6c, 0xfe6f, 1,
      0xfe75, 0xfe75, 1,
      0xfefd, 0xfefe, 1,
      0xff00, 0xff00, 1,
      0xffbf, 0xffc1, 1,
      0xffc8, 0xffc9, 1,
      0xffd0, 0xffd1, 1,
      0xffd8, 0xffd9, 1,
      0xffdd, 0xffdf, 1,
      0xffe7, 0xffe7, 1,
      0xffef, 0xfff8, 1,
      0xfffe, 0xffff, 1,
      0x1000c, 0x1000c, 1,
      0x10027, 0x10027, 1,
      0x1003b, 0x1003b, 1,
      0x1003e, 0x1003e, 1,
      0x1004e, 0x1004f, 1,
      0x1005e, 0x1007f, 1,
      0x100fb, 0x100ff, 1,
      0x10103, 0x10106, 1,
      0x10134, 0x10136, 1,
      0x1018b, 0x1018f, 1,
      0x1019c, 0x101cf, 1,
      0x101fe, 0x1027f, 1,
      0x1029d, 0x1029f, 1,
      0x102d1, 0x102ff, 1,
      0x1031f, 0x1031f, 1,
      0x10324, 0x1032f, 1,
      0x1034b, 0x1037f, 1,
      0x1039e, 0x1039e, 1,
      0x103c4, 0x103c7, 1,
      0x103d6, 0x103ff, 1,
      0x1049e, 0x1049f, 1,
      0x104aa, 0x107ff, 1,
      0x10806, 0x10807, 1,
      0x10809, 0x10809, 1,
      0x10836, 0x10836, 1,
      0x10839, 0x1083b, 1,
      0x1083d, 0x1083e, 1,
      0x10856, 0x10856, 1,
      0x10860, 0x108ff, 1,
      0x1091c, 0x1091e, 1,
      0x1093a, 0x1093e, 1,
      0x10940, 0x1097f, 1,
      0x109b8, 0x109bd, 1,
      0x109c0, 0x109ff, 1,
      0x10a04, 0x10a04, 1,
      0x10a07, 0x10a0b, 1,
      0x10a14, 0x10a14, 1,
      0x10a18, 0x10a18, 1,
      0x10a34, 0x10a37, 1,
      0x10a3b, 0x10a3e, 1,
      0x10a48, 0x10a4f, 1,
      0x10a59, 0x10a5f, 1,
      0x10a80, 0x10aff, 1,
      0x10b36, 0x10b38, 1,
      0x10b56, 0x10b57, 1,
      0x10b73, 0x10b77, 1,
      0x10b80, 0x10bff, 1,
      0x10c49, 0x10e5f, 1,
      0x10e7f, 0x10fff, 1,
      0x1104e, 0x11051, 1,
      0x11070, 0x1107f, 1,
      0x110c2, 0x110cf, 1,
      0x110e9, 0x110ef, 1,
      0x110fa, 0x110ff, 1,
      0x11135, 0x11135, 1,
      0x11144, 0x1117f, 1,
      0x111c9, 0x111cf, 1,
      0x111da, 0x1167f, 1,
      0x116b8, 0x116bf, 1,
      0x116ca, 0x11fff, 1,
      0x1236f, 0x123ff, 1,
      0x12463, 0x1246f, 1,
      0x12474, 0x12fff, 1,
      0x1342f, 0x167ff, 1,
      0x16a39, 0x16eff, 1,
      0x16f45, 0x16f4f, 1,
      0x16f7f, 0x16f8e, 1,
      0x16fa0, 0x1afff, 1,
      0x1b002, 0x1cfff, 1,
      0x1d0f6, 0x1d0ff, 1,
      0x1d127, 0x1d128, 1,
      0x1d1de, 0x1d1ff, 1,
      0x1d246, 0x1d2ff, 1,
      0x1d357, 0x1d35f, 1,
      0x1d372, 0x1d3ff, 1,
      0x1d455, 0x1d455, 1,
      0x1d49d, 0x1d49d, 1,
      0x1d4a0, 0x1d4a1, 1,
      0x1d4a3, 0x1d4a4, 1,
      0x1d4a7, 0x1d4a8, 1,
      0x1d4ad, 0x1d4ad, 1,
      0x1d4ba, 0x1d4ba, 1,
      0x1d4bc, 0x1d4bc, 1,
      0x1d4c4, 0x1d4c4, 1,
      0x1d506, 0x1d506, 1,
      0x1d50b, 0x1d50c, 1,
      0x1d515, 0x1d515, 1,
      0x1d51d, 0x1d51d, 1,
      0x1d53a, 0x1d53a, 1,
      0x1d53f, 0x1d53f, 1,
      0x1d545, 0x1d545, 1,
      0x1d547, 0x1d549, 1,
      0x1d551, 0x1d551, 1,
      0x1d6a6, 0x1d6a7, 1,
      0x1d7cc, 0x1d7cd, 1,
      0x1d800, 0x1edff, 1,
      0x1ee04, 0x1ee04, 1,
      0x1ee20, 0x1ee20, 1,
      0x1ee23, 0x1ee23, 1,
      0x1ee25, 0x1ee26, 1,
      0x1ee28, 0x1ee28, 1,
      0x1ee33, 0x1ee33, 1,
      0x1ee38, 0x1ee38, 1,
      0x1ee3a, 0x1ee3a, 1,
      0x1ee3c, 0x1ee41, 1,
      0x1ee43, 0x1ee46, 1,
      0x1ee48, 0x1ee48, 1,
      0x1ee4a, 0x1ee4a, 1,
      0x1ee4c, 0x1ee4c, 1,
      0x1ee50, 0x1ee50, 1,
      0x1ee53, 0x1ee53, 1,
      0x1ee55, 0x1ee56, 1,
      0x1ee58, 0x1ee58, 1,
      0x1ee5a, 0x1ee5a, 1,
      0x1ee5c, 0x1ee5c, 1,
      0x1ee5e, 0x1ee5e, 1,
      0x1ee60, 0x1ee60, 1,
      0x1ee63, 0x1ee63, 1,
      0x1ee65, 0x1ee66, 1,
      0x1ee6b, 0x1ee6b, 1,
      0x1ee73, 0x1ee73, 1,
      0x1ee78, 0x1ee78, 1,
      0x1ee7d, 0x1ee7d, 1,
      0x1ee7f, 0x1ee7f, 1,
      0x1ee8a, 0x1ee8a, 1,
      0x1ee9c, 0x1eea0, 1,
      0x1eea4, 0x1eea4, 1,
      0x1eeaa, 0x1eeaa, 1,
      0x1eebc, 0x1eeef, 1,
      0x1eef2, 0x1efff, 1,
      0x1f02c, 0x1f02f, 1,
      0x1f094, 0x1f09f, 1,
      0x1f0af, 0x1f0b0, 1,
      0x1f0bf, 0x1f0c0, 1,
      0x1f0d0, 0x1f0d0, 1,
      0x1f0e0, 0x1f0ff, 1,
      0x1f10b, 0x1f10f, 1,
      0x1f12f, 0x1f12f, 1,
      0x1f16c, 0x1f16f, 1,
      0x1f19b, 0x1f1e5, 1,
      0x1f203, 0x1f20f, 1,
      0x1f23b, 0x1f23f, 1,
      0x1f249, 0x1f24f, 1,
      0x1f252, 0x1f2ff, 1,
      0x1f321, 0x1f32f, 1,
      0x1f336, 0x1f336, 1,
      0x1f37d, 0x1f37f, 1,
      0x1f394, 0x1f39f, 1,
      0x1f3c5, 0x1f3c5, 1,
      0x1f3cb, 0x1f3df, 1,
      0x1f3f1, 0x1f3ff, 1,
      0x1f43f, 0x1f43f, 1,
      0x1f441, 0x1f441, 1,
      0x1f4f8, 0x1f4f8, 1,
      0x1f4fd, 0x1f4ff, 1,
      0x1f53e, 0x1f53f, 1,
      0x1f544, 0x1f54f, 1,
      0x1f568, 0x1f5fa, 1,
      0x1f641, 0x1f644, 1,
      0x1f650, 0x1f67f, 1,
      0x1f6c6, 0x1f6ff, 1,
      0x1f774, 0x1ffff, 1,
      0x2a6d7, 0x2a6ff, 1,
      0x2b735, 0x2b73f, 1,
      0x2b81e, 0x2f7ff, 1,
      0x2fa1e, 0xe0000, 1,
      0xe0002, 0xe001f, 1,
      0xe0080, 0xe00ff, 1,
      0xe01f0, 0xeffff, 1,
      0xffffe, 0xfffff, 1,
      0x10fffe, 0x10ffff, 1
    )

  final val Co = Array(
      0xe000, 0xf8ff, 1,
      0xf0000, 0xffffd, 1,
      0x100000, 0x10fffd, 1
    )

  final val Cs = Array(
      0xd800, 0xdfff, 1
    )

  lazy final val C = generateUnicodeTable(
      Seq(
	Character.CONTROL,     // Cc
	Character.FORMAT,      // Cf
	Character.UNASSIGNED,  // Cn
	Character.PRIVATE_USE, // Co
	Character.SURROGATE    // Cs
      ))

  final val Ll = Array(
      0x0061, 0x007a, 1,
      0x00b5, 0x00b5, 1,
      0x00df, 0x00df, 37,
      0x00e0, 0x00f6, 1,
      0x00f8, 0x00ff, 1,
      0x0101, 0x0137, 2,
      0x0138, 0x0148, 2,
      0x0149, 0x0177, 2,
      0x017a, 0x017e, 2,
      0x017f, 0x0180, 1,
      0x0183, 0x0185, 2,
      0x0188, 0x018c, 4,
      0x018d, 0x0192, 5,
      0x0195, 0x0199, 4,
      0x019a, 0x019b, 1,
      0x019e, 0x01a1, 3,
      0x01a3, 0x01a5, 2,
      0x01a8, 0x01aa, 2,
      0x01ab, 0x01ad, 2,
      0x01b0, 0x01b4, 4,
      0x01b6, 0x01b9, 3,
      0x01ba, 0x01bd, 3,
      0x01be, 0x01bf, 1,
      0x01c6, 0x01cc, 3,
      0x01ce, 0x01dc, 2,
      0x01dd, 0x01ef, 2,
      0x01f0, 0x01f3, 3,
      0x01f5, 0x01f9, 4,
      0x01fb, 0x0233, 2,
      0x0234, 0x0239, 1,
      0x023c, 0x023f, 3,
      0x0240, 0x0242, 2,
      0x0247, 0x024f, 2,
      0x0250, 0x0293, 1,
      0x0295, 0x02af, 1,
      0x0371, 0x0373, 2,
      0x0377, 0x0377, 1,
      0x037b, 0x037d, 1,
      0x0390, 0x03ac, 28,
      0x03ad, 0x03ce, 1,
      0x03d0, 0x03d1, 1,
      0x03d5, 0x03d7, 1,
      0x03d9, 0x03ef, 2,
      0x03f0, 0x03f3, 1,
      0x03f5, 0x03fb, 3,
      0x03fc, 0x0430, 52,
      0x0431, 0x045f, 1,
      0x0461, 0x0481, 2,
      0x048b, 0x04bf, 2,
      0x04c2, 0x04ce, 2,
      0x04cf, 0x0527, 2,
      0x0561, 0x0587, 1,
      0x1d00, 0x1d2b, 1,
      0x1d6b, 0x1d77, 1,
      0x1d79, 0x1d9a, 1,
      0x1e01, 0x1e95, 2,
      0x1e96, 0x1e9d, 1,
      0x1e9f, 0x1eff, 2,
      0x1f00, 0x1f07, 1,
      0x1f10, 0x1f15, 1,
      0x1f20, 0x1f27, 1,
      0x1f30, 0x1f37, 1,
      0x1f40, 0x1f45, 1,
      0x1f50, 0x1f57, 1,
      0x1f60, 0x1f67, 1,
      0x1f70, 0x1f7d, 1,
      0x1f80, 0x1f87, 1,
      0x1f90, 0x1f97, 1,
      0x1fa0, 0x1fa7, 1,
      0x1fb0, 0x1fb4, 1,
      0x1fb6, 0x1fb7, 1,
      0x1fbe, 0x1fc2, 4,
      0x1fc3, 0x1fc4, 1,
      0x1fc6, 0x1fc7, 1,
      0x1fd0, 0x1fd3, 1,
      0x1fd6, 0x1fd7, 1,
      0x1fe0, 0x1fe7, 1,
      0x1ff2, 0x1ff4, 1,
      0x1ff6, 0x1ff7, 1,
      0x210a, 0x210e, 4,
      0x210f, 0x2113, 4,
      0x212f, 0x2139, 5,
      0x213c, 0x213d, 1,
      0x2146, 0x2149, 1,
      0x214e, 0x2184, 54,
      0x2c30, 0x2c5e, 1,
      0x2c61, 0x2c65, 4,
      0x2c66, 0x2c6c, 2,
      0x2c71, 0x2c73, 2,
      0x2c74, 0x2c76, 2,
      0x2c77, 0x2c7b, 1,
      0x2c81, 0x2ce3, 2,
      0x2ce4, 0x2cec, 8,
      0x2cee, 0x2cee, 1,
      0x2cf3, 0x2cf3, 1,
      0x2d00, 0x2d25, 1,
      0x2d27, 0x2d2d, 6,
      0xa641, 0xa66d, 2,
      0xa681, 0xa697, 2,
      0xa723, 0xa72d, 2,
      0xa72f, 0xa731, 1,
      0xa733, 0xa76d, 2,
      0xa76f, 0xa76f, 1,
      0xa771, 0xa778, 1,
      0xa77a, 0xa77c, 2,
      0xa77f, 0xa787, 2,
      0xa78c, 0xa78e, 2,
      0xa791, 0xa793, 2,
      0xa7a1, 0xa7a9, 2,
      0xa7fa, 0xfb00, 21254,
      0xfb01, 0xfb06, 1,
      0xfb13, 0xfb17, 1,
      0xff41, 0xff5a, 1,
      0x10428, 0x1044f, 1,
      0x1d41a, 0x1d433, 1,
      0x1d44e, 0x1d454, 1,
      0x1d456, 0x1d467, 1,
      0x1d482, 0x1d49b, 1,
      0x1d4b6, 0x1d4b9, 1,
      0x1d4bb, 0x1d4bd, 2,
      0x1d4be, 0x1d4c3, 1,
      0x1d4c5, 0x1d4cf, 1,
      0x1d4ea, 0x1d503, 1,
      0x1d51e, 0x1d537, 1,
      0x1d552, 0x1d56b, 1,
      0x1d586, 0x1d59f, 1,
      0x1d5ba, 0x1d5d3, 1,
      0x1d5ee, 0x1d607, 1,
      0x1d622, 0x1d63b, 1,
      0x1d656, 0x1d66f, 1,
      0x1d68a, 0x1d6a5, 1,
      0x1d6c2, 0x1d6da, 1,
      0x1d6dc, 0x1d6e1, 1,
      0x1d6fc, 0x1d714, 1,
      0x1d716, 0x1d71b, 1,
      0x1d736, 0x1d74e, 1,
      0x1d750, 0x1d755, 1,
      0x1d770, 0x1d788, 1,
      0x1d78a, 0x1d78f, 1,
      0x1d7aa, 0x1d7c2, 1,
      0x1d7c4, 0x1d7c9, 1,
      0x1d7cb, 0x1d7cb, 1
    )

  final val Lm = Array(
      0x02b0, 0x02c1, 1,
      0x02c6, 0x02d1, 1,
      0x02e0, 0x02e4, 1,
      0x02ec, 0x02ee, 2,
      0x0374, 0x037a, 6,
      0x0559, 0x0640, 231,
      0x06e5, 0x06e6, 1,
      0x07f4, 0x07f5, 1,
      0x07fa, 0x081a, 32,
      0x0824, 0x0828, 4,
      0x0971, 0x0e46, 1237,
      0x0ec6, 0x10fc, 566,
      0x17d7, 0x1843, 108,
      0x1aa7, 0x1c78, 465,
      0x1c79, 0x1c7d, 1,
      0x1d2c, 0x1d6a, 1,
      0x1d78, 0x1d9b, 35,
      0x1d9c, 0x1dbf, 1,
      0x2071, 0x207f, 14,
      0x2090, 0x209c, 1,
      0x2c7c, 0x2c7d, 1,
      0x2d6f, 0x2d6f, 1,
      0x2e2f, 0x3005, 470,
      0x3031, 0x3035, 1,
      0x303b, 0x309d, 98,
      0x309e, 0x30fc, 94,
      0x30fd, 0x30fe, 1,
      0xa015, 0xa4f8, 1251,
      0xa4f9, 0xa4fd, 1,
      0xa60c, 0xa67f, 115,
      0xa7F8, 0xa7F9, 1,
      0xa717, 0xa71f, 1,
      0xa770, 0xa788, 24,
      0xa9cf, 0xaa70, 161,
      0xaadd, 0xaadd, 1,
      0xaaf3, 0xaaf4, 1,
      0xff70, 0xff70, 1,
      0xff9e, 0xff9f, 1,
      0x16f93, 0x16f9f, 1
    )

  final val Lo = Array(
      0x00aa, 0x00aa, 1,
      0x00ba, 0x00ba, 1,
      0x01bb, 0x01c0, 5,
      0x01c1, 0x01c3, 1,
      0x0294, 0x05d0, 828,
      0x05d1, 0x05ea, 1,
      0x05f0, 0x05f2, 1,
      0x0620, 0x063f, 1,
      0x0641, 0x064a, 1,
      0x066e, 0x066f, 1,
      0x0671, 0x06d3, 1,
      0x06d5, 0x06ee, 25,
      0x06ef, 0x06fa, 11,
      0x06fb, 0x06fc, 1,
      0x06ff, 0x0710, 17,
      0x0712, 0x072f, 1,
      0x074d, 0x07a5, 1,
      0x07b1, 0x07ca, 25,
      0x07cb, 0x07ea, 1,
      0x0800, 0x0815, 1,
      0x0840, 0x0858, 1,
      0x08a0, 0x08a0, 1,
      0x08a2, 0x08ac, 1,
      0x0904, 0x0939, 1,
      0x093d, 0x0950, 19,
      0x0958, 0x0961, 1,
      0x0972, 0x0977, 1,
      0x0979, 0x097f, 1,
      0x0985, 0x098c, 1,
      0x098f, 0x0990, 1,
      0x0993, 0x09a8, 1,
      0x09aa, 0x09b0, 1,
      0x09b2, 0x09b6, 4,
      0x09b7, 0x09b9, 1,
      0x09bd, 0x09ce, 17,
      0x09dc, 0x09dd, 1,
      0x09df, 0x09e1, 1,
      0x09f0, 0x09f1, 1,
      0x0a05, 0x0a0a, 1,
      0x0a0f, 0x0a10, 1,
      0x0a13, 0x0a28, 1,
      0x0a2a, 0x0a30, 1,
      0x0a32, 0x0a33, 1,
      0x0a35, 0x0a36, 1,
      0x0a38, 0x0a39, 1,
      0x0a59, 0x0a5c, 1,
      0x0a5e, 0x0a72, 20,
      0x0a73, 0x0a74, 1,
      0x0a85, 0x0a8d, 1,
      0x0a8f, 0x0a91, 1,
      0x0a93, 0x0aa8, 1,
      0x0aaa, 0x0ab0, 1,
      0x0ab2, 0x0ab3, 1,
      0x0ab5, 0x0ab9, 1,
      0x0abd, 0x0ad0, 19,
      0x0ae0, 0x0ae1, 1,
      0x0b05, 0x0b0c, 1,
      0x0b0f, 0x0b10, 1,
      0x0b13, 0x0b28, 1,
      0x0b2a, 0x0b30, 1,
      0x0b32, 0x0b33, 1,
      0x0b35, 0x0b39, 1,
      0x0b3d, 0x0b5c, 31,
      0x0b5d, 0x0b5f, 2,
      0x0b60, 0x0b61, 1,
      0x0b71, 0x0b83, 18,
      0x0b85, 0x0b8a, 1,
      0x0b8e, 0x0b90, 1,
      0x0b92, 0x0b95, 1,
      0x0b99, 0x0b9a, 1,
      0x0b9c, 0x0b9e, 2,
      0x0b9f, 0x0ba3, 4,
      0x0ba4, 0x0ba8, 4,
      0x0ba9, 0x0baa, 1,
      0x0bae, 0x0bb9, 1,
      0x0bd0, 0x0c05, 53,
      0x0c06, 0x0c0c, 1,
      0x0c0e, 0x0c10, 1,
      0x0c12, 0x0c28, 1,
      0x0c2a, 0x0c33, 1,
      0x0c35, 0x0c39, 1,
      0x0c3d, 0x0c58, 27,
      0x0c59, 0x0c60, 7,
      0x0c61, 0x0c85, 36,
      0x0c86, 0x0c8c, 1,
      0x0c8e, 0x0c90, 1,
      0x0c92, 0x0ca8, 1,
      0x0caa, 0x0cb3, 1,
      0x0cb5, 0x0cb9, 1,
      0x0cbd, 0x0cde, 33,
      0x0ce0, 0x0ce1, 1,
      0x0cf1, 0x0cf2, 1,
      0x0d05, 0x0d0c, 1,
      0x0d0e, 0x0d10, 1,
      0x0d12, 0x0d3a, 1,
      0x0d3d, 0x0d4e, 17,
      0x0d60, 0x0d61, 1,
      0x0d7a, 0x0d7f, 1,
      0x0d85, 0x0d96, 1,
      0x0d9a, 0x0db1, 1,
      0x0db3, 0x0dbb, 1,
      0x0dbd, 0x0dc0, 3,
      0x0dc1, 0x0dc6, 1,
      0x0e01, 0x0e30, 1,
      0x0e32, 0x0e33, 1,
      0x0e40, 0x0e45, 1,
      0x0e81, 0x0e82, 1,
      0x0e84, 0x0e87, 3,
      0x0e88, 0x0e8a, 2,
      0x0e8d, 0x0e94, 7,
      0x0e95, 0x0e97, 1,
      0x0e99, 0x0e9f, 1,
      0x0ea1, 0x0ea3, 1,
      0x0ea5, 0x0ea7, 2,
      0x0eaa, 0x0eab, 1,
      0x0ead, 0x0eb0, 1,
      0x0eb2, 0x0eb3, 1,
      0x0ebd, 0x0ec0, 3,
      0x0ec1, 0x0ec4, 1,
      0x0edc, 0x0edf, 1,
      0x0f00, 0x0f40, 64,
      0x0f41, 0x0f47, 1,
      0x0f49, 0x0f6c, 1,
      0x0f88, 0x0f8c, 1,
      0x1000, 0x102a, 1,
      0x103f, 0x1050, 17,
      0x1051, 0x1055, 1,
      0x105a, 0x105d, 1,
      0x1061, 0x1065, 4,
      0x1066, 0x106e, 8,
      0x106f, 0x1070, 1,
      0x1075, 0x1081, 1,
      0x108e, 0x10d0, 66,
      0x10d1, 0x10fa, 1,
      0x10fd, 0x10ff, 1,
      0x1100, 0x1248, 1,
      0x124a, 0x124d, 1,
      0x1250, 0x1256, 1,
      0x1258, 0x125a, 2,
      0x125b, 0x125d, 1,
      0x1260, 0x1288, 1,
      0x128a, 0x128d, 1,
      0x1290, 0x12b0, 1,
      0x12b2, 0x12b5, 1,
      0x12b8, 0x12be, 1,
      0x12c0, 0x12c2, 2,
      0x12c3, 0x12c5, 1,
      0x12c8, 0x12d6, 1,
      0x12d8, 0x1310, 1,
      0x1312, 0x1315, 1,
      0x1318, 0x135a, 1,
      0x1380, 0x138f, 1,
      0x13a0, 0x13f4, 1,
      0x1401, 0x166c, 1,
      0x166f, 0x167f, 1,
      0x1681, 0x169a, 1,
      0x16a0, 0x16ea, 1,
      0x1700, 0x170c, 1,
      0x170e, 0x1711, 1,
      0x1720, 0x1731, 1,
      0x1740, 0x1751, 1,
      0x1760, 0x176c, 1,
      0x176e, 0x1770, 1,
      0x1780, 0x17b3, 1,
      0x17dc, 0x1820, 68,
      0x1821, 0x1842, 1,
      0x1844, 0x1877, 1,
      0x1880, 0x18a8, 1,
      0x18aa, 0x18b0, 6,
      0x18b1, 0x18f5, 1,
      0x1900, 0x191c, 1,
      0x1950, 0x196d, 1,
      0x1970, 0x1974, 1,
      0x1980, 0x19ab, 1,
      0x19c1, 0x19c7, 1,
      0x1a00, 0x1a16, 1,
      0x1a20, 0x1a54, 1,
      0x1b05, 0x1b33, 1,
      0x1b45, 0x1b4b, 1,
      0x1b83, 0x1ba0, 1,
      0x1bae, 0x1baf, 1,
      0x1bba, 0x1bbf, 1,
      0x1bc0, 0x1be5, 1,
      0x1c00, 0x1c23, 1,
      0x1c4d, 0x1c4f, 1,
      0x1c5a, 0x1c77, 1,
      0x1ce9, 0x1cec, 1,
      0x1cee, 0x1cf1, 1,
      0x1cf5, 0x1cf6, 1,
      0x2135, 0x2138, 1,
      0x2d30, 0x2d67, 1,
      0x2d80, 0x2d96, 1,
      0x2da0, 0x2da6, 1,
      0x2da8, 0x2dae, 1,
      0x2db0, 0x2db6, 1,
      0x2db8, 0x2dbe, 1,
      0x2dc0, 0x2dc6, 1,
      0x2dc8, 0x2dce, 1,
      0x2dd0, 0x2dd6, 1,
      0x2dd8, 0x2dde, 1,
      0x3006, 0x303c, 54,
      0x3041, 0x3096, 1,
      0x309f, 0x30a1, 2,
      0x30a2, 0x30fa, 1,
      0x30ff, 0x3105, 6,
      0x3106, 0x312d, 1,
      0x3131, 0x318e, 1,
      0x31a0, 0x31ba, 1,
      0x31f0, 0x31ff, 1,
      0x3400, 0x4db5, 1,
      0x4e00, 0x9fcc, 1,
      0xa000, 0xa014, 1,
      0xa016, 0xa48c, 1,
      0xa4d0, 0xa4f7, 1,
      0xa500, 0xa60b, 1,
      0xa610, 0xa61f, 1,
      0xa62a, 0xa62b, 1,
      0xa66e, 0xa6a0, 50,
      0xa6a1, 0xa6e5, 1,
      0xa7fb, 0xa801, 1,
      0xa803, 0xa805, 1,
      0xa807, 0xa80a, 1,
      0xa80c, 0xa822, 1,
      0xa840, 0xa873, 1,
      0xa882, 0xa8b3, 1,
      0xa8f2, 0xa8f7, 1,
      0xa8fb, 0xa90a, 15,
      0xa90b, 0xa925, 1,
      0xa930, 0xa946, 1,
      0xa960, 0xa97c, 1,
      0xa984, 0xa9b2, 1,
      0xaa00, 0xaa28, 1,
      0xaa40, 0xaa42, 1,
      0xaa44, 0xaa4b, 1,
      0xaa60, 0xaa6f, 1,
      0xaa71, 0xaa76, 1,
      0xaa7a, 0xaa80, 6,
      0xaa81, 0xaaaf, 1,
      0xaab1, 0xaab5, 4,
      0xaab6, 0xaab9, 3,
      0xaaba, 0xaabd, 1,
      0xaac0, 0xaac2, 2,
      0xaadb, 0xaadc, 1,
      0xaae0, 0xaaea, 1,
      0xaaf2, 0xaaf2, 1,
      0xab01, 0xab06, 1,
      0xab09, 0xab0e, 1,
      0xab11, 0xab16, 1,
      0xab20, 0xab26, 1,
      0xab28, 0xab2e, 1,
      0xabc0, 0xabe2, 1,
      0xac00, 0xd7a3, 1,
      0xd7b0, 0xd7c6, 1,
      0xd7cb, 0xd7fb, 1,
      0xf900, 0xfa2f, 1,
      0xfa30, 0xfa6d, 1,
      0xfa70, 0xfad9, 1,
      0xfb1d, 0xfb1f, 2,
      0xfb20, 0xfb28, 1,
      0xfb2a, 0xfb36, 1,
      0xfb38, 0xfb3c, 1,
      0xfb3e, 0xfb40, 2,
      0xfb41, 0xfb43, 2,
      0xfb44, 0xfb46, 2,
      0xfb47, 0xfbb1, 1,
      0xfbd3, 0xfd3d, 1,
      0xfd50, 0xfd8f, 1,
      0xfd92, 0xfdc7, 1,
      0xfdf0, 0xfdfb, 1,
      0xfe70, 0xfe74, 1,
      0xfe76, 0xfefc, 1,
      0xff66, 0xff6f, 1,
      0xff71, 0xff9d, 1,
      0xffa0, 0xffbe, 1,
      0xffc2, 0xffc7, 1,
      0xffca, 0xffcf, 1,
      0xffd2, 0xffd7, 1,
      0xffda, 0xffdc, 1,
      0x10000, 0x1000b, 1,
      0x1000d, 0x10026, 1,
      0x10028, 0x1003a, 1,
      0x1003c, 0x1003d, 1,
      0x1003f, 0x1004d, 1,
      0x10050, 0x1005d, 1,
      0x10080, 0x100fa, 1,
      0x10280, 0x1029c, 1,
      0x102a0, 0x102d0, 1,
      0x10300, 0x1031e, 1,
      0x10330, 0x10340, 1,
      0x10342, 0x10349, 1,
      0x10380, 0x1039d, 1,
      0x103a0, 0x103c3, 1,
      0x103c8, 0x103cf, 1,
      0x10450, 0x1049d, 1,
      0x10800, 0x10805, 1,
      0x10808, 0x1080a, 2,
      0x1080b, 0x10835, 1,
      0x10837, 0x10838, 1,
      0x1083c, 0x1083f, 3,
      0x10840, 0x10855, 1,
      0x10900, 0x10915, 1,
      0x10920, 0x10939, 1,
      0x10980, 0x109b7, 1,
      0x109be, 0x109bf, 1,
      0x10a00, 0x10a10, 16,
      0x10a11, 0x10a13, 1,
      0x10a15, 0x10a17, 1,
      0x10a19, 0x10a33, 1,
      0x10a60, 0x10a7c, 1,
      0x10b00, 0x10b35, 1,
      0x10b40, 0x10b55, 1,
      0x10b60, 0x10b72, 1,
      0x10c00, 0x10c48, 1,
      0x11003, 0x11037, 1,
      0x11083, 0x110af, 1,
      0x110d0, 0x110e8, 1,
      0x11103, 0x11126, 1,
      0x11183, 0x111b2, 1,
      0x111c1, 0x111c4, 1,
      0x11680, 0x116aa, 1,
      0x12000, 0x1236e, 1,
      0x13000, 0x1342e, 1,
      0x16800, 0x16a38, 1,
      0x16f00, 0x16f44, 1,
      0x16f50, 0x16f50, 1,
      0x1b000, 0x1b001, 1,
      0x1ee00, 0x1ee03, 1,
      0x1ee05, 0x1ee1f, 1,
      0x1ee21, 0x1ee22, 1,
      0x1ee24, 0x1ee24, 1,
      0x1ee27, 0x1ee29, 2,
      0x1ee2a, 0x1ee32, 1,
      0x1ee34, 0x1ee37, 1,
      0x1ee39, 0x1ee3b, 2,
      0x1ee42, 0x1ee42, 2,
      0x1ee47, 0x1ee4d, 2,
      0x1ee4e, 0x1ee4f, 1,
      0x1ee51, 0x1ee52, 1,
      0x1ee54, 0x1ee54, 1,
      0x1ee57, 0x1ee61, 2,
      0x1ee62, 0x1ee64, 2,
      0x1ee67, 0x1ee6a, 1,
      0x1ee6c, 0x1ee72, 1,
      0x1ee74, 0x1ee77, 1,
      0x1ee79, 0x1ee7c, 1,
      0x1ee7e, 0x1ee7e, 1,
      0x1ee80, 0x1ee89, 1,
      0x1ee8b, 0x1ee9b, 1,
      0x1eea1, 0x1eea3, 1,
      0x1eea5, 0x1eea9, 1,
      0x1eeab, 0x1eebb, 1,
      0x20000, 0x2a6d6, 1,
      0x2a700, 0x2b734, 1,
      0x2b740, 0x2b81d, 1,
      0x2f800, 0x2fa1d, 1
    )

  final val Lt = Array(
      0x01c5, 0x01cb, 3,
      0x01f2, 0x1f88, 7574,
      0x1f89, 0x1f8f, 1,
      0x1f98, 0x1f9f, 1,
      0x1fa8, 0x1faf, 1,
      0x1fbc, 0x1fcc, 16,
      0x1ffc, 0x1ffc, 1
    )

  final val Lu = Array(
      0x0041, 0x005a, 1,
      0x00c0, 0x00d6, 1,
      0x00d8, 0x00de, 1,
      0x0100, 0x0136, 2,
      0x0139, 0x0147, 2,
      0x014a, 0x0178, 2,
      0x0179, 0x017d, 2,
      0x0181, 0x0182, 1,
      0x0184, 0x0186, 2,
      0x0187, 0x0189, 2,
      0x018a, 0x018b, 1,
      0x018e, 0x0191, 1,
      0x0193, 0x0194, 1,
      0x0196, 0x0198, 1,
      0x019c, 0x019d, 1,
      0x019f, 0x01a0, 1,
      0x01a2, 0x01a6, 2,
      0x01a7, 0x01a9, 2,
      0x01ac, 0x01ae, 2,
      0x01af, 0x01b1, 2,
      0x01b2, 0x01b3, 1,
      0x01b5, 0x01b7, 2,
      0x01b8, 0x01bc, 4,
      0x01c4, 0x01cd, 3,
      0x01cf, 0x01db, 2,
      0x01de, 0x01ee, 2,
      0x01f1, 0x01f4, 3,
      0x01f6, 0x01f8, 1,
      0x01fa, 0x0232, 2,
      0x023a, 0x023b, 1,
      0x023d, 0x023e, 1,
      0x0241, 0x0243, 2,
      0x0244, 0x0246, 1,
      0x0248, 0x024e, 2,
      0x0370, 0x0372, 2,
      0x0376, 0x0386, 16,
      0x0388, 0x038a, 1,
      0x038c, 0x038e, 2,
      0x038f, 0x0391, 2,
      0x0392, 0x03a1, 1,
      0x03a3, 0x03ab, 1,
      0x03cf, 0x03d2, 3,
      0x03d3, 0x03d4, 1,
      0x03d8, 0x03ee, 2,
      0x03f4, 0x03f7, 3,
      0x03f9, 0x03fa, 1,
      0x03fd, 0x042f, 1,
      0x0460, 0x0480, 2,
      0x048a, 0x04c0, 2,
      0x04c1, 0x04cd, 2,
      0x04d0, 0x0526, 2,
      0x0531, 0x0556, 1,
      0x10a0, 0x10c5, 1,
      0x10c7, 0x10c7, 1,
      0x10cd, 0x10cd, 1,
      0x1e00, 0x1e94, 2,
      0x1e9e, 0x1efe, 2,
      0x1f08, 0x1f0f, 1,
      0x1f18, 0x1f1d, 1,
      0x1f28, 0x1f2f, 1,
      0x1f38, 0x1f3f, 1,
      0x1f48, 0x1f4d, 1,
      0x1f59, 0x1f5f, 2,
      0x1f68, 0x1f6f, 1,
      0x1fb8, 0x1fbb, 1,
      0x1fc8, 0x1fcb, 1,
      0x1fd8, 0x1fdb, 1,
      0x1fe8, 0x1fec, 1,
      0x1ff8, 0x1ffb, 1,
      0x2102, 0x2107, 5,
      0x210b, 0x210d, 1,
      0x2110, 0x2112, 1,
      0x2115, 0x2119, 4,
      0x211a, 0x211d, 1,
      0x2124, 0x212a, 2,
      0x212b, 0x212d, 1,
      0x2130, 0x2133, 1,
      0x213e, 0x213f, 1,
      0x2145, 0x2183, 62,
      0x2c00, 0x2c2e, 1,
      0x2c60, 0x2c62, 2,
      0x2c63, 0x2c64, 1,
      0x2c67, 0x2c6d, 2,
      0x2c6e, 0x2c70, 1,
      0x2c72, 0x2c75, 3,
      0x2c7e, 0x2c80, 1,
      0x2c82, 0x2ce2, 2,
      0x2ceb, 0x2ced, 2,
      0x2cf2, 0x2cf2, 1,
      0xa640, 0xa66c, 2,
      0xa680, 0xa696, 2,
      0xa722, 0xa72e, 2,
      0xa732, 0xa76e, 2,
      0xa779, 0xa77d, 2,
      0xa77e, 0xa786, 2,
      0xa78b, 0xa78d, 2,
      0xa790, 0xa792, 2,
      0xa7a0, 0xa7aa, 2,
      0xff21, 0xff3a, 1,
      0x10400, 0x10427, 1,
      0x1d400, 0x1d419, 1,
      0x1d434, 0x1d44d, 1,
      0x1d468, 0x1d481, 1,
      0x1d49c, 0x1d49e, 2,
      0x1d49f, 0x1d4a5, 3,
      0x1d4a6, 0x1d4a9, 3,
      0x1d4aa, 0x1d4ac, 1,
      0x1d4ae, 0x1d4b5, 1,
      0x1d4d0, 0x1d4e9, 1,
      0x1d504, 0x1d505, 1,
      0x1d507, 0x1d50a, 1,
      0x1d50d, 0x1d514, 1,
      0x1d516, 0x1d51c, 1,
      0x1d538, 0x1d539, 1,
      0x1d53b, 0x1d53e, 1,
      0x1d540, 0x1d544, 1,
      0x1d546, 0x1d54a, 4,
      0x1d54b, 0x1d550, 1,
      0x1d56c, 0x1d585, 1,
      0x1d5a0, 0x1d5b9, 1,
      0x1d5d4, 0x1d5ed, 1,
      0x1d608, 0x1d621, 1,
      0x1d63c, 0x1d655, 1,
      0x1d670, 0x1d689, 1,
      0x1d6a8, 0x1d6c0, 1,
      0x1d6e2, 0x1d6fa, 1,
      0x1d71c, 0x1d734, 1,
      0x1d756, 0x1d76e, 1,
      0x1d790, 0x1d7a8, 1,
      0x1d7ca, 0x1d7ca, 1
    )

  lazy final val L = generateUnicodeTable(
      Seq(
	Character.UPPERCASE_LETTER, // Lu
	Character.LOWERCASE_LETTER, // Ll
	Character.TITLECASE_LETTER, // Lt
	Character.MODIFIER_LETTER,  // Lm
	Character.OTHER_LETTER	    // Lo
      ))

  final val Mc = Array(
      // Ported directly from Unicode 6.3, then JVM 8 warts added.
      0x0903, 0x0903, 1,
      0x093b, 0x093b, 1,
      0x093e, 0x0940, 1,
      0x0949, 0x094c, 1,
      0x094e, 0x094f, 1,
      0x0982, 0x0983, 1,
      0x09be, 0x09c0, 1,
      0x09c7, 0x09c8, 1,
      0x09cb, 0x09cc, 1,
      0x09d7, 0x09d7, 1,
      0x0a03, 0x0a03, 1,
      0x0a3e, 0x0a40, 1,
      0x0a83, 0x0a83, 1,
      0x0abe, 0x0ac0, 1,
      0x0ac9, 0x0ac9, 1,
      0x0acb, 0x0acc, 1,
      0x0b02, 0x0b03, 1,
      0x0b3e, 0x0b3e, 1,
      0x0b40, 0x0b40, 1,
      0x0b47, 0x0b48, 1,
      0x0b4b, 0x0b4c, 1,
      0x0b57, 0x0b57, 1,
      0x0bbe, 0x0bbf, 1,
      0x0bc1, 0x0bc2, 1,
      0x0bc6, 0x0bc8, 1,
      0x0bca, 0x0bcc, 1,
      0x0bd7, 0x0bd7, 1,
      0x0c01, 0x0c03, 1,
      0x0c41, 0x0c44, 1,
      0x0c82, 0x0c83, 1,
      0x0cbe, 0x0cbe, 1,
      0x0cc0, 0x0cc4, 1,
      0x0cc7, 0x0cc8, 1,
      0x0cca, 0x0ccb, 1,
      0x0cd5, 0x0cd6, 1,
      0x0d02, 0x0d03, 1,
      0x0d3e, 0x0d40, 1,
      0x0d46, 0x0d48, 1,
      0x0d4a, 0x0d4c, 1,
      0x0d57, 0x0d57, 1,
      0x0d82, 0x0d83, 1,
      0x0dcf, 0x0dd1, 1,
      0x0dd8, 0x0ddf, 1,
      0x0df2, 0x0df3, 1,
      0x0f3e, 0x0f3f, 1,
      0x0f7f, 0x0f7f, 1,
      0x102b, 0x102c, 1,
      0x1031, 0x1031, 1,
      0x1038, 0x1038, 1,
      0x103b, 0x103c, 1,
      0x1056, 0x1057, 1,
      0x1062, 0x1064, 1,
      0x1067, 0x106d, 1,
      0x1083, 0x1084, 1,
      0x1087, 0x108c, 1,
      0x108f, 0x108f, 1,
      0x109a, 0x109c, 1,
      0x17b6, 0x17b6, 1,
      0x17be, 0x17c5, 1,
      0x17c7, 0x17c8, 1,
      0x1923, 0x1926, 1,
      0x1929, 0x192b, 1,
      0x1930, 0x1931, 1,
      0x1933, 0x1938, 1,
      0x19b0, 0x19c0, 1,
      0x19c8, 0x19c9, 1,
//    0x1a19, 0x1a1a, 1, // 0x1a1b Mn in Unicode 6.3
      0x1a19, 0x1a1b, 1, // 0x1a1b Mc in Java 8, Mn in Unicode 6.3
      0x1a55, 0x1a55, 1,
      0x1a57, 0x1a57, 1,
      0x1a61, 0x1a61, 1,
      0x1a63, 0x1a64, 1,
      0x1a6d, 0x1a72, 1,
      0x1b04, 0x1b04, 1,
      0x1b35, 0x1b35, 1,
      0x1b3b, 0x1b3b, 1,
      0x1b3d, 0x1b41, 1,
      0x1b43, 0x1b44, 1,
      0x1b82, 0x1b82, 1,
      0x1ba1, 0x1ba1, 1,
      0x1ba6, 0x1ba7, 1,
      0x1baa, 0x1baa, 1,
      0x1bac, 0x1bad, 1,
      0x1be7, 0x1be7, 1,
      0x1bea, 0x1bec, 1,
      0x1bee, 0x1bee, 1,
      0x1bf2, 0x1bf3, 1,
      0x1c24, 0x1c2b, 1,
      0x1c34, 0x1c35, 1,
      0x1ce1, 0x1ce1, 1,
      0x1cf2, 0x1cf3, 1,
      0x302e, 0x302f, 1,
      0xa823, 0xa824, 1,
      0xa827, 0xa827, 1,
      0xa880, 0xa881, 1,
      0xa8b4, 0xa8c3, 1,
      0xa952, 0xa953, 1,
      0xa983, 0xa983, 1,
      0xa9b4, 0xa9b5, 1,
      0xa9ba, 0xa9bb, 1,
      0xa9bd, 0xa9c0, 1,
      0xaa2f, 0xaa30, 1,
      0xaa33, 0xaa34, 1,
      0xaa4d, 0xaa4d, 1,
      0xaa7b, 0xaa7b, 1,
      0xaaeb, 0xaaeb, 1,
      0xaaee, 0xaaef, 1,
      0xaaf5, 0xaaf5, 1,
      0xabe3, 0xabe4, 1,
      0xabe6, 0xabe7, 1,
      0xabe9, 0xabea, 1,
      0xabec, 0xabec, 1,
      0x11000, 0x11000, 1,
      0x11002, 0x11002, 1,
      0x11082, 0x11082, 1,
      0x110b0, 0x110b2, 1,
      0x110b7, 0x110b8, 1,
      0x1112c, 0x1112c, 1,
      0x11182, 0x11182, 1,
      0x111b3, 0x111b5, 1,
      0x111bf, 0x111c0, 1,
      0x116ac, 0x116ac, 1,
      0x116ae, 0x116af, 1,
      0x116b6, 0x116b6, 1,
      0x16f51, 0x16f7e, 1,
      0x1d165, 0x1d166, 1,
      0x1d16d, 0x1d172, 1
    )

  final val Me = Array(
      0x0488, 0x0489, 1,
      0x20dd, 0x20e0, 1,
      0x20e2, 0x20e4, 1,
      0xa670, 0xa672, 1
    )

  final val Mn = Array(
      // Ported directly from Unicode 6.3, then JVM 8 warts added.
      0x0300, 0x036f, 1,
      0x0483, 0x0487, 1,
      0x0591, 0x05bd, 1,
      0x05bf, 0x05bf, 1,
      0x05c1, 0x05c2, 1,
      0x05c4, 0x05c5, 1,
      0x05c7, 0x05c7, 1,
      0x0610, 0x061a, 1,
      0x064b, 0x065f, 1,
      0x0670, 0x0670, 1,
      0x06d6, 0x06dc, 1,
      0x06df, 0x06e4, 1,
      0x06e7, 0x06e8, 1,
      0x06ea, 0x06ed, 1,
      0x0711, 0x0711, 1,
      0x0730, 0x074a, 1,
      0x07a6, 0x07b0, 1,
      0x07eb, 0x07f3, 1,
      0x0816, 0x0819, 1,
      0x081b, 0x0823, 1,
      0x0825, 0x0827, 1,
      0x0829, 0x082d, 1,
      0x0859, 0x085b, 1,
      0x08e4, 0x08fe, 1,
      0x0900, 0x0902, 1,
      0x093a, 0x093a, 1,
      0x093c, 0x093c, 1,
      0x0941, 0x0948, 1,
      0x094d, 0x094d, 1,
      0x0951, 0x0957, 1,
      0x0962, 0x0963, 1,
      0x0981, 0x0981, 1,
      0x09bc, 0x09bc, 1,
      0x09c1, 0x09c4, 1,
      0x09cd, 0x09cd, 1,
      0x09e2, 0x09e3, 1,
      0x0a01, 0x0a02, 1,
      0x0a3c, 0x0a3c, 1,
      0x0a41, 0x0a42, 1,
      0x0a47, 0x0a48, 1,
      0x0a4b, 0x0a4d, 1,
      0x0a51, 0x0a51, 1,
      0x0a70, 0x0a71, 1,
      0x0a75, 0x0a75, 1,
      0x0a81, 0x0a82, 1,
      0x0abc, 0x0abc, 1,
      0x0ac1, 0x0ac5, 1,
      0x0ac7, 0x0ac8, 1,
      0x0acd, 0x0acd, 1,
      0x0ae2, 0x0ae3, 1,
      0x0b01, 0x0b01, 1,
      0x0b3c, 0x0b3c, 1,
      0x0b3f, 0x0b3f, 1,
      0x0b41, 0x0b44, 1,
      0x0b4d, 0x0b4d, 1,
      0x0b56, 0x0b56, 1,
      0x0b62, 0x0b63, 1,
      0x0b82, 0x0b82, 1,
      0x0bc0, 0x0bc0, 1,
      0x0bcd, 0x0bcd, 1,
      0x0c3e, 0x0c40, 1,
      0x0c46, 0x0c48, 1,
      0x0c4a, 0x0c4d, 1,
      0x0c55, 0x0c56, 1,
      0x0c62, 0x0c63, 1,
      0x0cbc, 0x0cbc, 1,
      0x0cbf, 0x0cbf, 1,
      0x0cc6, 0x0cc6, 1,
      0x0ccc, 0x0ccd, 1,
      0x0ce2, 0x0ce3, 1,
      0x0d41, 0x0d44, 1,
      0x0d4d, 0x0d4d, 1,
      0x0d62, 0x0d63, 1,
      0x0dca, 0x0dca, 1,
      0x0dd2, 0x0dd4, 1,
      0x0dd6, 0x0dd6, 1,
      0x0e31, 0x0e31, 1,
      0x0e34, 0x0e3a, 1,
      0x0e47, 0x0e4e, 1,
      0x0eb1, 0x0eb1, 1,
      0x0eb4, 0x0eb9, 1,
      0x0ebb, 0x0ebc, 1,
      0x0ec8, 0x0ecd, 1,
      0x0f18, 0x0f19, 1,
      0x0f35, 0x0f35, 1,
      0x0f37, 0x0f37, 1,
      0x0f39, 0x0f39, 1,
      0x0f71, 0x0f7e, 1,
      0x0f80, 0x0f84, 1,
      0x0f86, 0x0f87, 1,
      0x0f8d, 0x0f97, 1,
      0x0f99, 0x0fbc, 1,
      0x0fc6, 0x0fc6, 1,
      0x102d, 0x1030, 1,
      0x1032, 0x1037, 1,
      0x1039, 0x103a, 1,
      0x103d, 0x103e, 1,
      0x1058, 0x1059, 1,
      0x105e, 0x1060, 1,
      0x1071, 0x1074, 1,
      0x1082, 0x1082, 1,
      0x1085, 0x1086, 1,
      0x108d, 0x108d, 1,
      0x109d, 0x109d, 1,
      0x135d, 0x135f, 1,
      0x1712, 0x1714, 1,
      0x1732, 0x1734, 1,
      0x1752, 0x1753, 1,
      0x1772, 0x1773, 1,
      0x17b4, 0x17b5, 1,
      0x17b7, 0x17bd, 1,
      0x17c6, 0x17c6, 1,
      0x17c9, 0x17d3, 1,
      0x17dd, 0x17dd, 1,
      0x180b, 0x180d, 1,
      0x18a9, 0x18a9, 1,
      0x1920, 0x1922, 1,
      0x1927, 0x1928, 1,
      0x1932, 0x1932, 1,
      0x1939, 0x193b, 1,
      0x1a17, 0x1a18, 1,
//    0x1a1b, 0x1a1b, 1, // Mn Unicode 6.3, Mc in Java 8
      0x1a56, 0x1a56, 1,
      0x1a58, 0x1a5e, 1,
      0x1a60, 0x1a60, 1,
      0x1a62, 0x1a62, 1,
      0x1a65, 0x1a6c, 1,
      0x1a73, 0x1a7c, 1,
      0x1a7f, 0x1a7f, 1,
      0x1b00, 0x1b03, 1,
      0x1b34, 0x1b34, 1,
      0x1b36, 0x1b3a, 1,
      0x1b3c, 0x1b3c, 1,
      0x1b42, 0x1b42, 1,
      0x1b6b, 0x1b73, 1,
      0x1b80, 0x1b81, 1,
      0x1ba2, 0x1ba5, 1,
      0x1ba8, 0x1ba9, 1,
      0x1bab, 0x1bab, 1,
      0x1be6, 0x1be6, 1,
      0x1be8, 0x1be9, 1,
      0x1bed, 0x1bed, 1,
      0x1bef, 0x1bf1, 1,
      0x1c2c, 0x1c33, 1,
      0x1c36, 0x1c37, 1,
      0x1cd0, 0x1cd2, 1,
      0x1cd4, 0x1ce0, 1,
      0x1ce2, 0x1ce8, 1,
      0x1ced, 0x1ced, 1,
      0x1cf4, 0x1cf4, 1,
      0x1dc0, 0x1de6, 1,
      0x1dfc, 0x1dff, 1,
      0x20d0, 0x20dc, 1,
      0x20e1, 0x20e1, 1,
      0x20e5, 0x20f0, 1,
      0x2cef, 0x2cf1, 1,
      0x2d7f, 0x2d7f, 1,
      0x2de0, 0x2dff, 1,
      0x302a, 0x302d, 1,
      0x3099, 0x309a, 1,
      0xa66f, 0xa66f, 1,
      0xa674, 0xa67d, 1,
      0xa69f, 0xa69f, 1,
      0xa6f0, 0xa6f1, 1,
      0xa802, 0xa802, 1,
      0xa806, 0xa806, 1,
      0xa80b, 0xa80b, 1,
      0xa825, 0xa826, 1,
      0xa8c4, 0xa8c4, 1,
      0xa8e0, 0xa8f1, 1,
      0xa926, 0xa92d, 1,
      0xa947, 0xa951, 1,
      0xa980, 0xa982, 1,
      0xa9b3, 0xa9b3, 1,
      0xa9b6, 0xa9b9, 1,
      0xa9bc, 0xa9bc, 1,
      0xaa29, 0xaa2e, 1,
      0xaa31, 0xaa32, 1,
      0xaa35, 0xaa36, 1,
      0xaa43, 0xaa43, 1,
      0xaa4c, 0xaa4c, 1,
      0xaab0, 0xaab0, 1,
      0xaab2, 0xaab4, 1,
      0xaab7, 0xaab8, 1,
      0xaabe, 0xaabf, 1,
      0xaac1, 0xaac1, 1,
      0xaaec, 0xaaed, 1,
      0xaaf6, 0xaaf6, 1,
      0xabe5, 0xabe5, 1,
      0xabe8, 0xabe8, 1,
      0xabed, 0xabed, 1,
      0xfb1e, 0xfb1e, 1,
      0xfe00, 0xfe0f, 1,
      0xfe20, 0xfe26, 1,
      0x101fd, 0x101fd, 1,
      0x10a01, 0x10a03, 1,
      0x10a05, 0x10a06, 1,
      0x10a0c, 0x10a0f, 1,
      0x10a38, 0x10a3a, 1,
      0x10a3f, 0x10a3f, 1,
      0x11001, 0x11001, 1,
      0x11038, 0x11046, 1,
      0x11080, 0x11081, 1,
      0x110b3, 0x110b6, 1,
      0x110b9, 0x110ba, 1,
      0x11100, 0x11102, 1,
      0x11127, 0x1112b, 1,
      0x1112d, 0x11134, 1,
      0x11180, 0x11181, 1,
      0x111b6, 0x111be, 1,
      0x116ab, 0x116ab, 1,
      0x116ad, 0x116ad, 1,
      0x116b0, 0x116b5, 1,
      0x116b7, 0x116b7, 1,
      0x16f8f, 0x16f92, 1,
      0x1d167, 0x1d169, 1,
      0x1d17b, 0x1d182, 1,
      0x1d185, 0x1d18b, 1,
      0x1d1aa, 0x1d1ad, 1,
      0x1d242, 0x1d244, 1,
      0xe0100, 0xe01ef, 1
    )

  lazy final val M = generateUnicodeTable(
      Seq(
	Character.COMBINING_SPACING_MARK, // Mc
	Character.ENCLOSING_MARK,	  // Me
	Character.NON_SPACING_MARK	  // Mn
      ))

  final val Nd = Array(
      0x0030, 0x0039, 1,
      0x0660, 0x0669, 1,
      0x06f0, 0x06f9, 1,
      0x07c0, 0x07c9, 1,
      0x0966, 0x096f, 1,
      0x09e6, 0x09ef, 1,
      0x0a66, 0x0a6f, 1,
      0x0ae6, 0x0aef, 1,
      0x0b66, 0x0b6f, 1,
      0x0be6, 0x0bef, 1,
      0x0c66, 0x0c6f, 1,
      0x0ce6, 0x0cef, 1,
      0x0d66, 0x0d6f, 1,
      0x0e50, 0x0e59, 1,
      0x0ed0, 0x0ed9, 1,
      0x0f20, 0x0f29, 1,
      0x1040, 0x1049, 1,
      0x1090, 0x1099, 1,
      0x17e0, 0x17e9, 1,
      0x1810, 0x1819, 1,
      0x1946, 0x194f, 1,
      0x19d0, 0x19d9, 1,
      0x1a80, 0x1a89, 1,
      0x1a90, 0x1a99, 1,
      0x1b50, 0x1b59, 1,
      0x1bb0, 0x1bb9, 1,
      0x1c40, 0x1c49, 1,
      0x1c50, 0x1c59, 1,
      0xa620, 0xa629, 1,
      0xa8d0, 0xa8d9, 1,
      0xa900, 0xa909, 1,
      0xa9d0, 0xa9d9, 1,
      0xaa50, 0xaa59, 1,
      0xabf0, 0xabf9, 1,
      0xff10, 0xff19, 1,
      0x104a0, 0x104a9, 1,
      0x11066, 0x1106f, 1,
      0x110f0, 0x110f9, 1,
      0x11136, 0x1113f, 1,
      0x111d0, 0x111d9, 1,
      0x116c0, 0x116c9, 1,
      0x1d7ce, 0x1d7ff, 1
    )

  final val Nl = Array(
      0x16ee, 0x16f0, 1,
      0x2160, 0x2182, 1,
      0x2185, 0x2188, 1,
      0x3007, 0x3021, 26,
      0x3022, 0x3029, 1,
      0x3038, 0x303a, 1,
      0xa6e6, 0xa6ef, 1,
      0x10140, 0x10174, 1,
      0x10341, 0x1034a, 9,
      0x103d1, 0x103d5, 1,
      0x10140, 0x10174, 1,
      0x10341, 0x10341, 1,
      0x1034a, 0x1034a, 1,
      0x103d1, 0x103d5, 1,
      0x12400, 0x12462, 1
    )

  final val No = Array(
      0x00b2, 0x00b3, 1,
      0x00b9, 0x00bc, 3,
      0x00bd, 0x00be, 1,
      0x09f4, 0x09f9, 1,
      0x0b72, 0x0b77, 1,
      0x0bf0, 0x0bf2, 1,
      0x0c78, 0x0c7e, 1,
      0x0d70, 0x0d75, 1,
      0x0f2a, 0x0f33, 1,
      0x1369, 0x137c, 1,
      0x17f0, 0x17f9, 1,
      0x19da, 0x2070, 1686,
      0x2074, 0x2079, 1,
      0x2080, 0x2089, 1,
      0x2150, 0x215f, 1,
      0x2189, 0x2460, 727,
      0x2461, 0x249b, 1,
      0x24ea, 0x24ff, 1,
      0x2776, 0x2793, 1,
      0x2cfd, 0x3192, 1173,
      0x3193, 0x3195, 1,
      0x3220, 0x3229, 1,
      0x3248, 0x324f, 1,
      0x3251, 0x325f, 1,
      0x3280, 0x3289, 1,
      0x32b1, 0x32bf, 1,
      0xa830, 0xa835, 1,
      0x10107, 0x10133, 1,
      0x10175, 0x10178, 1,
      0x1018a, 0x10320, 406,
      0x10321, 0x10323, 1,
      0x10858, 0x1085f, 1,
      0x10916, 0x1091b, 1,
      0x10a40, 0x10a47, 1,
      0x10a7d, 0x10a7e, 1,
      0x10b58, 0x10b5f, 1,
      0x10b78, 0x10b7f, 1,
      0x10e60, 0x10e7e, 1,
      0x11052, 0x11065, 1,
      0x1d360, 0x1d371, 1,
      0x1f100, 0x1f10a, 1
    )

  lazy final val N = generateUnicodeTable(
      Seq(
	Character.DECIMAL_DIGIT_NUMBER, // Nd
	Character.LETTER_NUMBER,	// Nl
	Character.OTHER_NUMBER		// No
      ))

  final val Pc = Array(
      0x005f, 0x203f, 8160,
      0x2040, 0x2054, 20,
      0xfe33, 0xfe34, 1,
      0xfe4d, 0xfe4f, 1,
      0xff3f, 0xff3f, 1
    )

  final val Pd = Array(
      0x002d, 0x058a, 1373,
      0x05be, 0x1400, 3650,
      0x1806, 0x2010, 2058,
      0x2011, 0x2015, 1,
      0x2e17, 0x2e1a, 3,
      0x2e3a, 0x2e3b, 1,
      0x301c, 0x3030, 20,
      0x30a0, 0xfe31, 52625,
      0xfe32, 0xfe58, 38,
      0xfe63, 0xff0d, 170
    )

  final val Pe = Array(
      // Original RE2j code. JVM 8 warts documented.
      0x0029, 0x005d, 52,
      0x007d, 0x0f3b, 3774,
      0x0f3d, 0x169c, 1887,
      0x2046, 0x207e, 56,
      0x208e, 0x208e, 1,
//    0x2309, 0x230b, 2, // Pe in Unicode 6.3, Sm in Java 8
      0x232a, 0x232a, 1,
      0x2769, 0x2775, 2,
      0x27c6, 0x27e7, 33,
      0x27e9, 0x27ef, 2,
      0x2984, 0x2998, 2,
      0x29d9, 0x29db, 2,
      0x29fd, 0x2e23, 1062,
      0x2e25, 0x2e29, 2,
      0x3009, 0x3011, 2,
      0x3015, 0x301b, 2,
      0x301e, 0x301f, 1,
      0xfd3f, 0xfe18, 217,
      0xfe36, 0xfe44, 2,
      0xfe48, 0xfe5a, 18,
      0xfe5c, 0xfe5e, 2,
      0xff09, 0xff3d, 52,
      0xff5d, 0xff63, 3
    )

  final val Pf = Array(
      0x00bb, 0x2019, 8030,
      0x201d, 0x203a, 29,
      0x2e03, 0x2e05, 2,
      0x2e0a, 0x2e0d, 3,
      0x2e1d, 0x2e21, 4
    )

  final val Pi = Array(
      0x00ab, 0x2018, 8045,
      0x201b, 0x201c, 1,
      0x201f, 0x2039, 26,
      0x2e02, 0x2e04, 2,
      0x2e09, 0x2e0c, 3,
      0x2e1c, 0x2e20, 4
    )

  final val Po = Array(
      0x0021, 0x0023, 1,
      0x0025, 0x0027, 1,
      0x002a, 0x002e, 2,
      0x002f, 0x003a, 11,
      0x003b, 0x003f, 4,
      0x0040, 0x005c, 28,
      0x00a1, 0x00a7, 6,
      0x00b6, 0x00b7, 1 ,
      0x00bf, 0x037e, 703,
      0x0387, 0x055a, 467,
      0x055b, 0x055f, 1,
      0x0589, 0x05c0, 55,
      0x05c3, 0x05c6, 3,
      0x05f3, 0x05f4, 1,
      0x0609, 0x060a, 1,
      0x060c, 0x060d, 1,
      0x061b, 0x061e, 3,
      0x061f, 0x066a, 75,
      0x066b, 0x066d, 1,
      0x06d4, 0x0700, 44,
      0x0701, 0x070d, 1,
      0x07f7, 0x07f9, 1,
      0x0830, 0x083e, 1,
      0x085e, 0x0964, 262,
      0x0965, 0x0970, 11,
      0x0af0, 0x0af0, 1,
      0x0df4, 0x0e4f, 91,
      0x0e5a, 0x0e5b, 1,
      0x0f04, 0x0f12, 1,
      0x0f14, 0x0f14, 1,
      0x0f85, 0x0fd0, 75,
      0x0fd1, 0x0fd4, 1,
      0x0fd9, 0x0fda, 1,
      0x104a, 0x104f, 1,
      0x10fb, 0x10fb, 1,
      0x1360, 0x1368, 1,
      0x166d, 0x166e, 1,
      0x16eb, 0x16ed, 1,
      0x1735, 0x1736, 1,
      0x17d4, 0x17d6, 1,
      0x17d8, 0x17da, 1,
      0x1800, 0x1805, 1,
      0x1807, 0x180a, 1,
      0x1944, 0x1945, 1,
      0x1a1e, 0x1a1f, 1,
      0x1aa0, 0x1aa6, 1,
      0x1aa8, 0x1aad, 1,
      0x1b5a, 0x1b60, 1,
      0x1bfc, 0x1bff, 1,
      0x1c3b, 0x1c3f, 1,
      0x1c7e, 0x1c7f, 1,
      0x1cc0, 0x1cc7, 1,
      0x1cd3, 0x2016, 835,
      0x2017, 0x2020, 9,
      0x2021, 0x2027, 1,
      0x2030, 0x2038, 1,
      0x203b, 0x203e, 1,
      0x2041, 0x2043, 1,
      0x2047, 0x2051, 1,
      0x2053, 0x2055, 2,
      0x2056, 0x205e, 1,
      0x2cf9, 0x2cfc, 1,
      0x2cfe, 0x2cff, 1,
      0x2d70, 0x2e00, 144,
      0x2e01, 0x2e06, 5,
      0x2e07, 0x2e08, 1,
      0x2e0b, 0x2e0e, 3,
      0x2e0f, 0x2e16, 1,
      0x2e18, 0x2e19, 1,
      0x2e1b, 0x2e1e, 3,
      0x2e1f, 0x2e2a, 11,
      0x2e2b, 0x2e2e, 1,
      0x2e30, 0x2e39, 1,
      0x3001, 0x3003, 1,
      0x303d, 0x30fb, 190,
      0xa4fe, 0xa4ff, 1,
      0xa60d, 0xa60f, 1,
      0xa673, 0xa67e, 11,
      0xa6f2, 0xa6f7, 1,
      0xa874, 0xa877, 1,
      0xa8ce, 0xa8cf, 1,
      0xa8f8, 0xa8fa, 1,
      0xa92e, 0xa92f, 1,
      0xa95f, 0xa9c1, 98,
      0xa9c2, 0xa9cd, 1,
      0xa9de, 0xa9df, 1,
      0xaa5c, 0xaa5f, 1,
      0xaade, 0xaadf, 1,
      0xaaf0, 0xaaf1, 1,
      0xabeb, 0xfe10, 21029,
      0xfe11, 0xfe16, 1,
      0xfe19, 0xfe30, 23,
      0xfe45, 0xfe46, 1,
      0xfe49, 0xfe4c, 1,
      0xfe50, 0xfe52, 1,
      0xfe54, 0xfe57, 1,
      0xfe5f, 0xfe61, 1,
      0xfe68, 0xfe6a, 2,
      0xfe6b, 0xff01, 150,
      0xff02, 0xff03, 1,
      0xff05, 0xff07, 1,
      0xff0a, 0xff0e, 2,
      0xff0f, 0xff1a, 11,
      0xff1b, 0xff1f, 4,
      0xff20, 0xff3c, 28,
      0xff61, 0xff64, 3,
      0xff65, 0xff65, 1,
      0x10100, 0x10102, 1,
      0x1039f, 0x1039f, 1,
      0x103d0, 0x10857, 1159,
      0x1091f, 0x1093f, 32,
      0x10a50, 0x10a58, 1,
      0x10a7f, 0x10b39, 186,
      0x10b3a, 0x10b3f, 1,
      0x11047, 0x1104d, 1,
      0x110bb, 0x110bc, 1,
      0x110be, 0x110c1, 1,
      0x11140, 0x11143, 1,
      0x111c5, 0x111c8, 1,
      0x12470, 0x12473, 1
    )

  final val Ps = Array(
      0x0028, 0x005b, 51,
      0x007b, 0x0f3a, 3775,
      0x0f3c, 0x169b, 1887,
      0x201a, 0x201e, 4,
      0x2045, 0x207d, 56,
      0x208d, 0x208d, 1,
//    0x2308, 0x230a, 2, // Ps in Unicode 6.3, Sm in Java 8
      0x2329, 0x2329, 1,
      0x2768, 0x2774, 2,
      0x27c5, 0x27e6, 33,
      0x27e8, 0x27ee, 2,
      0x2983, 0x2997, 2,
      0x29d8, 0x29da, 2,
      0x29fc, 0x2e22, 1062,
      0x2e24, 0x2e28, 2,
      0x3008, 0x3010, 2,
      0x3014, 0x301a, 2,
      0x301d, 0xfd3e, 52513,
      0xfe17, 0xfe35, 30,
      0xfe37, 0xfe43, 2,
      0xfe47, 0xfe59, 18,
      0xfe5b, 0xfe5d, 2,
      0xff08, 0xff3b, 51,
      0xff5b, 0xff5f, 4,
      0xff62, 0xff62, 1
    )

  lazy	final val P =
    UnicodeTables.generateUnicodeTable(
      Seq(
	Character.CONNECTOR_PUNCTUATION,     // Pc
	Character.DASH_PUNCTUATION,	     // Pd
	Character.END_PUNCTUATION,	     // Pe
	Character.FINAL_QUOTE_PUNCTUATION,   // Pf
	Character.INITIAL_QUOTE_PUNCTUATION, // Pi
	Character.OTHER_PUNCTUATION,	     // Po
	Character.START_PUNCTUATION	     // Ps
      ))

  final val Sc = Array(
      0x0024, 0x0024, 1,
      0x00a2, 0x00a5, 1,
      0x058f, 0x058f, 1,
      0x060b, 0x060b, 1,
      0x09f2, 0x09f3, 1,
      0x09fb, 0x09fb, 1,
      0x0af1, 0x0af1, 1,
      0x0bf9, 0x0bf9, 1,
      0x0e3f, 0x0e3f, 1,
      0x17db, 0x17db, 1,
      0x20a0, 0x20ba, 1,
      0xa838, 0xa838, 1,
      0xfdfc, 0xfdfc, 1,
      0xfe69, 0xfe69, 1,
      0xff04, 0xff04, 1,
      0xffe0, 0xffe1, 1,
      0xffe5, 0xffe6, 1
    )

  final val Sk = Array(
      0x005e, 0x0060, 2,
      0x00a8, 0x00af, 7,
      0x00b4, 0x00b8, 4,
      0x02c2, 0x02c5, 1,
      0x02d2, 0x02df, 1,
      0x02e5, 0x02eb, 1,
      0x02ed, 0x02ef, 2,
      0x02f0, 0x02ff, 1,
      0x0375, 0x0384, 15,
      0x0385, 0x1fbd, 7224,
      0x1fbf, 0x1fc1, 1,
      0x1fcd, 0x1fcf, 1,
      0x1fdd, 0x1fdf, 1,
      0x1fed, 0x1fef, 1,
      0x1ffd, 0x1ffe, 1,
      0x309b, 0x309c, 1,
      0xa700, 0xa716, 1,
      0xa720, 0xa721, 1,
      0xa789, 0xa78a, 1,
      0xfbb2, 0xfbc1, 1,
      0xff3e, 0xff40, 2,
      0xffe3, 0xffe3, 1
    )

  final val Sm = Array(
      // Ported directly from Unicode 6.3, then JVM 8 warts added.
      0x002b, 0x002b, 1,
      0x003c, 0x003e, 1,
      0x007c, 0x007c, 1,
      0x007e, 0x007e, 1,
      0x00ac, 0x00ac, 1,
      0x00b1, 0x00b1, 1,
      0x00d7, 0x00d7, 1,
      0x00f7, 0x00f7, 1,
      0x03f6, 0x03f6, 1,
      0x0606, 0x0608, 1,
      0x2044, 0x2044, 1,
      0x2052, 0x2052, 1,
      0x207a, 0x207c, 1,
      0x208a, 0x208c, 1,
      0x2118, 0x2118, 1,
      0x2140, 0x2144, 1,
      0x214b, 0x214b, 1,
      0x2190, 0x2194, 1,
      0x219a, 0x219b, 1,
      0x21a0, 0x21a0, 1,
      0x21a3, 0x21a3, 1,
      0x21a6, 0x21a6, 1,
      0x21ae, 0x21ae, 1,
      0x21ce, 0x21cf, 1,
      0x21d2, 0x21d2, 1,
      0x21d4, 0x21d4, 1,
      0x21f4, 0x22ff, 1,

      0x2308, 0x230b, 1, // Sm in Java 8, Ps & Pe in Unicode 6.3

      0x2320, 0x2321, 1,
      0x237c, 0x237c, 1,
      0x239b, 0x23b3, 1,
      0x23dc, 0x23e1, 1,
      0x25b7, 0x25b7, 1,
      0x25c1, 0x25c1, 1,
      0x25f8, 0x25ff, 1,
      0x266f, 0x266f, 1,
      0x27c0, 0x27c4, 1,
      0x27c7, 0x27e5, 1,
      0x27f0, 0x27ff, 1,
      0x2900, 0x2982, 1,
      0x2999, 0x29d7, 1,
      0x29dc, 0x29fb, 1,
      0x29fe, 0x2aff, 1,
      0x2b30, 0x2b44, 1,
      0x2b47, 0x2b4c, 1,
      0xfb29, 0xfb29, 1,
      0xfe62, 0xfe62, 1,
      0xfe64, 0xfe66, 1,
      0xff0b, 0xff0b, 1,
      0xff1c, 0xff1e, 1,
      0xff5c, 0xff5c, 1,
      0xff5e, 0xff5e, 1,
      0xffe2, 0xffe2, 1,
      0xffe9, 0xffec, 1,
      0x1d6c1, 0x1d6c1, 1,
      0x1d6db, 0x1d6db, 1,
      0x1d6fb, 0x1d6fb, 1,
      0x1d715, 0x1d715, 1,
      0x1d735, 0x1d735, 1,
      0x1d74f, 0x1d74f, 1,
      0x1d76f, 0x1d76f, 1,
      0x1d789, 0x1d789, 1,
      0x1d7a9, 0x1d7a9, 1,
      0x1d7c3, 0x1d7c3, 1,
      0x1eef0, 0x1eef1, 1
    )

  final val So = Array(
      0x00a6, 0x00a6, 1,
      0x00a9, 0x00ae, 5,
      0x00b0, 0x00b0, 1,
      0x0482, 0x060e, 396,
      0x060f, 0x06de, 207,
      0x06e9, 0x06fd, 20,
      0x06fe, 0x07f6, 248,
      0x09fa, 0x0b70, 374,
      0x0bf3, 0x0bf8, 1,
      0x0bfa, 0x0c7f, 133,
      0x0d79, 0x0f01, 392,
      0x0f02, 0x0f03, 1,
      0x0f13, 0x0f13, 1,
      0x0f15, 0x0f17, 1,
      0x0f1a, 0x0f1f, 1,
      0x0f34, 0x0f38, 2,
      0x0fbe, 0x0fc5, 1,
      0x0fc7, 0x0fcc, 1,
      0x0fce, 0x0fcf, 1,
      0x0fd5, 0x0fd8, 1,
      0x109e, 0x109f, 1,
      0x1390, 0x1399, 1,
      0x1940, 0x19de, 158,
      0x19df, 0x19ff, 1,
      0x1b61, 0x1b6a, 1,
      0x1b74, 0x1b7c, 1,
      0x2100, 0x2101, 1,
      0x2103, 0x2106, 1,
      0x2108, 0x2109, 1,
      0x2114, 0x2116, 2,
      0x2117, 0x211e, 7,
      0x211f, 0x2123, 1,
      0x2125, 0x2129, 2,
      0x212e, 0x213a, 12,
      0x213b, 0x214a, 15,
      0x214c, 0x214d, 1,
      0x214f, 0x2195, 70,
      0x2196, 0x2199, 1,
      0x219c, 0x219f, 1,
      0x21a1, 0x21a2, 1,
      0x21a4, 0x21a5, 1,
      0x21a7, 0x21ad, 1,
      0x21af, 0x21cd, 1,
      0x21d0, 0x21d1, 1,
      0x21d3, 0x21d5, 2,
      0x21d6, 0x21f3, 1,
      0x2300, 0x2307, 1,
      0x230c, 0x231f, 1,
      0x2322, 0x2328, 1,
      0x232b, 0x237b, 1,
      0x237d, 0x239a, 1,
      0x23b4, 0x23db, 1,
      0x23e2, 0x23f3, 1,
      0x2400, 0x2426, 1,
      0x2440, 0x244a, 1,
      0x249c, 0x24e9, 1,
      0x2500, 0x25b6, 1,
      0x25b8, 0x25c0, 1,
      0x25c2, 0x25f7, 1,
      0x2600, 0x266e, 1,
      0x2670, 0x26ff, 1,
      0x2701, 0x2767, 1,
      0x2794, 0x27bf, 1,
      0x2800, 0x28ff, 1,
      0x2b00, 0x2b2f, 1,
      0x2b45, 0x2b46, 1,
      0x2b50, 0x2b59, 1,
      0x2ce5, 0x2cea, 1,
      0x2e80, 0x2e99, 1,
      0x2e9b, 0x2ef3, 1,
      0x2f00, 0x2fd5, 1,
      0x2ff0, 0x2ffb, 1,
      0x3004, 0x3012, 14,
      0x3013, 0x3020, 13,
      0x3036, 0x3037, 1,
      0x303e, 0x303f, 1,
      0x3190, 0x3191, 1,
      0x3196, 0x319f, 1,
      0x31c0, 0x31e3, 1,
      0x3200, 0x321e, 1,
      0x322a, 0x3247, 1,
      0x3250, 0x3250, 1,
      0x3260, 0x327f, 1,
      0x328a, 0x32b0, 1,
      0x32c0, 0x32fe, 1,
      0x3300, 0x33ff, 1,
      0x4dc0, 0x4dff, 1,
      0xa490, 0xa4c6, 1,
      0xa828, 0xa82b, 1,
      0xa836, 0xa837, 1,
      0xa839, 0xaa77, 574,
      0xaa78, 0xaa79, 1,
      0xfdfd, 0xffe4, 487,
      0xffe8, 0xffed, 5,
      0xffee, 0xfffc, 14,
      0xfffd, 0xfffd, 1,
      0x10137, 0x1013f, 1,
      0x10179, 0x10189, 1,
      0x10190, 0x1019b, 1,
      0x101d0, 0x101fc, 1,
      0x1d000, 0x1d0f5, 1,
      0x1d100, 0x1d126, 1,
      0x1d129, 0x1d164, 1,
      0x1d16a, 0x1d16c, 1,
      0x1d183, 0x1d184, 1,
      0x1d18c, 0x1d1a9, 1,
      0x1d1ae, 0x1d1dd, 1,
      0x1d200, 0x1d241, 1,
      0x1d245, 0x1d300, 187,
      0x1d301, 0x1d356, 1,
      0x1f000, 0x1f02b, 1,
      0x1f030, 0x1f093, 1,
      0x1f0a0, 0x1f0ae, 1,
      0x1f0b1, 0x1f0be, 1,
      0x1f0c1, 0x1f0cf, 1,
      0x1f0d1, 0x1f0df, 1,
      0x1f110, 0x1f12e, 1,
      0x1f130, 0x1f16b, 1,
      0x1f170, 0x1f19a, 1,
      0x1f1e6, 0x1f202, 1,
      0x1f210, 0x1f23a, 1,
      0x1f240, 0x1f248, 1,
      0x1f250, 0x1f251, 1,
      0x1f300, 0x1f320, 1,
      0x1f330, 0x1f335, 1,
      0x1f337, 0x1f37c, 1,
      0x1f380, 0x1f393, 1,
      0x1f3a0, 0x1f3c4, 1,
      0x1f3c6, 0x1f3ca, 1,
      0x1f3e0, 0x1f3f0, 1,
      0x1f400, 0x1f43e, 1,
      0x1f440, 0x1f442, 2,
      0x1f443, 0x1f4f7, 1,
      0x1f4f9, 0x1f4fc, 1,
      0x1f500, 0x1f53d, 1,
      0x1f540, 0x1f543, 1,
      0x1f550, 0x1f567, 1,
      0x1f5fb, 0x1f640, 1,
      0x1f645, 0x1f64f, 1,
      0x1f680, 0x1f6c5, 1,
      0x1f700, 0x1f773, 1
    )

  lazy final val S = generateUnicodeTable(
      Seq(
	Character.CURRENCY_SYMBOL, // Sc
	Character.MODIFIER_SYMBOL, // Sk
	Character.MATH_SYMBOL,	   // Sm
	Character.OTHER_SYMBOL	   // So
      ))

  final val Zl = Array(
      0x2028, 0x2028, 1
    )

  final val Zp = Array(
      0x2029, 0x2029, 1
    )

  final val Zs = Array(
      // Ported directly from Unicode 6.3, then JVM 8 warts added.
      0x0020, 0x0020, 1,
      0x00a0, 0x00a0, 1,
      0x1680, 0x1680, 1,
      0x180e, 0x180e, 1, // CF in Unicode 6.3, Zs in Java 8
      0x2000, 0x200a, 1,
      0x202f, 0x202f, 1,
      0x205f, 0x205f, 1,
      0x3000, 0x3000, 1
    )
// format: on

  lazy final val Z = generateUnicodeTable(
    Seq(
      Character.LINE_SEPARATOR,      // Zl
      Character.PARAGRAPH_SEPARATOR, // Zp
      Character.SPACE_SEPARATOR      // Zs
    )
  )

}
