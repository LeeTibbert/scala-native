#!/bin/bash
#
# Format C/C++ code using clang-format.
#
# To ensure reproducible formatting this script checks that clang-format
# matches the lowest version number of LLVM supported by Scala Native.
#
# Usage: $0 [--test]
#
# Set CLANG_FORMAT_PATH to configure path to clang-format.

set -euo pipefail
IFS=$'\n\t'

# The required version of clang-format (matches minimum clang version) for CI
CLANG_FORMAT_VERSION=6

die() {
  while [ "$#" -gt 0 ]; do
    echo >&2 "$1"; shift
  done
  exit 1
}

## As a side effect, intentionally sets bash variable "version"
check_clang_format_version() {
  cmd="$1"

  if [ ! -e "$(type -P "$cmd")" ]; then
    version="Unknown"
    echo "Setting version to UNKNOWN"
    return 0
  else
    # More elegant ways of extracting version exist, such as grep -P perl.
    # This way has the minimal requirement of standard "grep" which is
    # highly likely to be on any system actively used for development.  
    version=$("$cmd" --version \
      | grep -E -i -o " version [0-9]+.[0-9]+" \
      | grep -E -i -o "[0-9]+.[0-9]+")

    major=${version%%.*}
    echo "Debug - major is ${major}"
    ls -l $CLANG_FORMAT_PATH
    echo "Debug "

    [ $major -eq $CLANG_FORMAT_VERSION ]
  fi
}

clang_format=

if [ -n "${CLANG_FORMAT_PATH:-}" ]; then
  check_clang_format_version "$CLANG_FORMAT_PATH" || \
    die "CLANG_FORMAT_PATH must point to version $CLANG_FORMAT_VERSION" \
        "CLANG_FORMAT_PATH points to $CLANG_FORMAT_PATH"
  clang_format="$CLANG_FORMAT_PATH"
else
  if check_clang_format_version clang-format; then
    clang_format=clang-format
  fi
fi

if [ -z "$clang_format" ]; then
  die "clang-format version $CLANG_FORMAT_VERSION expected, but version $version found." \
      "Install LLVM version $CLANG_FORMAT_VERSION and rerun." \
      "Hint: export CLANG_FORMAT_PATH=/path/to/clang-format"
fi

test_mode=

while [ "$#" -gt 0 ]; do
  arg="$1"
  case "$arg" in
    --test) test_mode=true; shift ;;
    --*)    die "Unknown argument: $arg" "Usage: $0 [--test]" ;;
    *)      break ;;
  esac
done

# Use this block for version 10 and above
# if [ "$test_mode" = true ]; then
#   opts="--dry-run"
#   err="--Werror"
# else
#   opts="-i"
#   err=
# fi

# Remove for version 10 and above
opts="-i"
err=

if [ "$#" -gt 0 ]; then
  "$clang_format" --style=file "$opts" "$@"
else
  find . -name "*.[ch]" -or -name "*.cpp" -or -name "*.hpp" | \
    xargs "$clang_format" --style=file "$opts" $err || \
      die "C/C++ code formatting changes detected" \
          "Run '$0' to reformat."
fi

# Remove for version 10 and above
if [ "$test_mode" = true ]; then
  git diff --quiet --exit-code || \
    die "C/C++ code formatting changes detected" \
        "Run '$0' to reformat."
fi
